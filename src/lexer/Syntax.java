
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 28 13:42:28 CST 2022
//----------------------------------------------------

package lexer;

import java_cup.runtime.Symbol;
import lexer.Semantic;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 28 13:42:28 CST 2022
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\005" +
    "\000\002\003\003\000\002\003\006\000\002\003\005\000" +
    "\002\003\006\000\002\003\005\000\002\003\004\000\002" +
    "\004\003\000\002\004\005\000\002\005\003\000\002\055" +
    "\002\000\002\005\005\000\002\005\004\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\004\000\002\010\003\000\002\010" +
    "\004\000\002\010\003\000\002\011\003\000\002\011\006" +
    "\000\002\012\003\000\002\056\002\000\002\012\006\000" +
    "\002\057\002\000\002\012\006\000\002\012\005\000\002" +
    "\013\003\000\002\060\002\000\002\013\006\000\002\061" +
    "\002\000\002\013\006\000\002\014\003\000\002\062\002" +
    "\000\002\014\006\000\002\015\003\000\002\063\002\000" +
    "\002\015\006\000\002\016\003\000\002\064\002\000\002" +
    "\016\006\000\002\017\003\000\002\065\002\000\002\017" +
    "\006\000\002\020\003\000\002\020\005\000\002\021\003" +
    "\000\002\021\003\000\002\022\003\000\002\022\005\000" +
    "\002\023\005\000\002\023\004\000\002\023\005\000\002" +
    "\023\005\000\002\023\006\000\002\023\004\000\002\023" +
    "\005\000\002\023\005\000\002\023\006\000\002\024\004" +
    "\000\002\024\004\000\002\024\003\000\002\025\003\000" +
    "\002\025\005\000\002\026\003\000\002\026\005\000\002" +
    "\027\003\000\002\027\005\000\002\027\006\000\002\027" +
    "\005\000\002\027\006\000\002\027\006\000\002\027\005" +
    "\000\002\027\006\000\002\030\003\000\002\030\005\000" +
    "\002\031\003\000\002\031\005\000\002\031\006\000\002" +
    "\032\003\000\002\032\005\000\002\033\003\000\002\033" +
    "\005\000\002\034\003\000\002\034\004\000\002\034\004" +
    "\000\002\034\003\000\002\035\004\000\002\035\005\000" +
    "\002\035\005\000\002\036\004\000\002\036\004\000\002" +
    "\036\004\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\066\002\000\002\067\002" +
    "\000\002\037\011\000\002\037\005\000\002\037\011\000" +
    "\002\037\005\000\002\037\010\000\002\037\011\000\002" +
    "\037\011\000\002\037\005\000\002\054\003\000\002\070" +
    "\002\000\002\054\006\000\002\071\002\000\002\072\002" +
    "\000\002\040\011\000\002\040\005\000\002\040\007\000" +
    "\002\040\007\000\002\040\007\000\002\040\005\000\002" +
    "\041\003\000\002\041\004\000\002\041\004\000\002\042" +
    "\006\000\002\042\006\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\045\006\000\002\045\007\000" +
    "\002\045\007\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\044\003\000\002\044\004" +
    "\000\002\046\004\000\002\046\005\000\002\046\005\000" +
    "\002\046\006\000\002\046\004\000\002\047\003\000\002" +
    "\047\004\000\002\050\003\000\002\051\006\000\002\051" +
    "\006\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\004\000\002\051\004\000\002\052\003\000" +
    "\002\052\003\000\002\052\004\000\002\052\004\000\002" +
    "\053\003\000\002\053\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\024\003\015\007\022\010\024\017\004\020" +
    "\005\022\023\024\011\030\014\046\010\001\002\000\032" +
    "\003\uffe9\007\uffe9\010\uffe9\017\uffe9\020\uffe9\022\uffe9\030" +
    "\uffe9\034\uffe9\035\uffe9\045\uffe9\046\uffe9\050\uffe9\001\002" +
    "\000\032\003\uffe8\007\uffe8\010\uffe8\017\uffe8\020\uffe8\022" +
    "\uffe8\030\uffe8\034\uffe8\035\uffe8\045\uffe8\046\uffe8\050\uffe8" +
    "\001\002\000\026\002\uff5c\003\uff5c\007\uff5c\010\uff5c\017" +
    "\uff5c\020\uff5c\022\uff5c\024\uff5c\030\uff5c\046\uff5c\001\002" +
    "\000\026\002\uff5d\003\uff5d\007\uff5d\010\uff5d\017\uff5d\020" +
    "\uff5d\022\uff5d\024\uff5d\030\uff5d\046\uff5d\001\002\000\006" +
    "\030\014\046\010\001\002\000\006\030\uff65\046\uff65\001" +
    "\002\000\026\002\u0132\003\015\007\022\010\024\017\004" +
    "\020\005\022\023\024\011\030\014\046\010\001\002\000" +
    "\022\003\uffa3\010\u0131\030\uffa3\034\uffa3\035\uffa3\045\uffa3" +
    "\046\uffa3\050\uffa3\001\002\000\034\003\uffb4\007\uffb4\010" +
    "\uffb4\017\uffb4\020\uffb4\022\uffb4\034\uffb4\035\uffb4\037\uffb4" +
    "\045\uffb4\046\uffb4\050\uffb4\052\uffb4\001\002\000\012\003" +
    "\042\035\u012e\051\u0130\052\035\001\002\000\024\003\042" +
    "\007\022\010\024\017\004\020\005\022\023\046\036\050" +
    "\043\052\035\001\002\000\006\030\014\046\010\001\002" +
    "\000\012\003\031\030\014\035\027\046\010\001\002\000" +
    "\026\002\uff59\003\uff59\007\uff59\010\uff59\017\uff59\020\uff59" +
    "\022\uff59\024\uff59\030\uff59\046\uff59\001\002\000\032\003" +
    "\uffeb\007\uffeb\010\uffeb\017\uffeb\020\uffeb\022\uffeb\030\uffeb" +
    "\034\uffeb\035\uffeb\045\uffeb\046\uffeb\050\uffeb\001\002\000" +
    "\032\003\uffea\007\uffea\010\uffea\017\uffea\020\uffea\022\uffea" +
    "\030\uffea\034\uffea\035\uffea\045\uffea\046\uffea\050\uffea\001" +
    "\002\000\030\003\uffa0\007\022\017\004\020\005\022\023" +
    "\030\uffa0\034\uffa0\035\uffa0\045\uffa0\046\uffa0\050\uffa0\001" +
    "\002\000\020\003\uffa1\030\uffa1\034\uffa1\035\uffa1\045\uffa1" +
    "\046\uffa1\050\uffa1\001\002\000\006\034\u0124\035\u0125\001" +
    "\002\000\104\002\uff9f\003\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\013\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\035" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\046\uff9f\051\uff9f\052\uff9f" +
    "\055\uff9f\061\uff9f\001\002\000\032\003\042\007\022\010" +
    "\024\017\004\020\005\022\023\034\uffa7\035\uffa7\037\037" +
    "\046\036\050\043\052\035\001\002\000\004\035\033\001" +
    "\002\000\006\034\uffa5\035\uffa5\001\002\000\104\002\uff9d" +
    "\003\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012" +
    "\uff9d\013\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d" +
    "\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\035\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\046\uff9d\051\uff9d\052\uff9d\055\uff9d\061\uff9d\001" +
    "\002\000\100\003\uff67\005\uff67\006\uff67\007\uff67\010\uff67" +
    "\011\uff67\012\uff67\013\uff67\015\uff67\016\uff67\017\uff67\020" +
    "\uff67\021\uff67\022\uff67\023\uff67\025\uff67\026\uff67\027\uff67" +
    "\030\uff67\031\uff67\032\uff67\033\uff67\035\uff67\040\uff67\041" +
    "\uff67\042\uff67\046\uff67\051\uff67\052\uff67\055\uff67\061\uff67" +
    "\001\002\000\100\003\270\005\272\006\254\007\022\010" +
    "\024\011\256\012\276\013\302\015\260\016\264\017\004" +
    "\020\005\021\267\022\023\023\273\025\275\026\274\027" +
    "\261\030\053\031\064\032\067\033\056\035\262\040\050" +
    "\041\065\042\057\046\073\051\263\052\035\055\051\061" +
    "\072\001\002\000\022\003\210\007\022\010\024\017\004" +
    "\020\005\022\023\030\207\045\212\001\002\000\030\030" +
    "\053\031\064\032\067\033\056\040\050\041\065\042\057" +
    "\046\073\052\176\055\051\061\072\001\002\000\026\002" +
    "\uff62\003\uff62\007\uff62\010\uff62\017\uff62\020\uff62\022\uff62" +
    "\024\uff62\030\uff62\046\uff62\001\002\000\020\003\042\007" +
    "\022\010\024\017\004\020\005\022\023\052\035\001\002" +
    "\000\004\051\172\001\002\000\030\030\053\031\064\032" +
    "\067\033\056\040\050\041\065\042\057\046\073\047\054" +
    "\055\051\061\072\001\002\000\012\003\031\030\014\035" +
    "\027\046\010\001\002\000\014\034\uffa7\035\uffa7\037\037" +
    "\046\036\050\043\001\002\000\052\004\ufffb\034\ufffb\035" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\053\ufffb\054" +
    "\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\001\002\000\036" +
    "\034\uffe1\035\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\047\uffe1\051\uffe1\053\uffe1\054\uffe1\056\uffe1" +
    "\057\uffe1\001\002\000\026\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\040\uffee\041\uffee\042\uffee\046\uffee\055\uffee\061\uffee" +
    "\001\002\000\026\030\uffec\031\uffec\032\uffec\033\uffec\040" +
    "\uffec\041\uffec\042\uffec\046\uffec\055\uffec\061\uffec\001\002" +
    "\000\042\034\uffe3\035\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\047\uffe3\051\uffe3\053\uffe3" +
    "\054\uffe3\056\uffe3\057\uffe3\060\uffe3\001\002\000\052\004" +
    "\000\034\000\035\000\037\000\040\000\041\000\042\000" +
    "\043\000\044\000\045\000\046\000\047\000\050\000\051" +
    "\000\053\000\054\000\056\000\057\000\060\000\061\000" +
    "\001\002\000\034\003\uffb1\007\uffb1\010\uffb1\017\uffb1\020" +
    "\uffb1\022\uffb1\034\uffb1\035\uffb1\037\uffb1\045\uffb1\046\uffb1" +
    "\050\uffb1\052\uffb1\001\002\000\052\004\160\034\ufff3\035" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\046\156\047\ufff3\050\157\051\ufff3\053\ufff3\054" +
    "\ufff3\056\ufff3\057\ufff3\060\ufff3\061\155\001\002\000\052" +
    "\004\ufffd\034\ufffd\035\ufffd\037\ufffd\040\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\053\ufffd\054\ufffd\056\ufffd\057\ufffd\060\ufffd\061" +
    "\ufffd\001\002\000\026\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\040\uffef\041\uffef\042\uffef\046\uffef\055\uffef\061\uffef\001" +
    "\002\000\030\034\uffd6\035\uffd6\040\121\041\122\045\uffd6" +
    "\047\uffd6\051\uffd6\053\uffd6\054\uffd6\056\uffd6\057\uffd6\001" +
    "\002\000\024\034\uffd3\035\uffd3\045\uffd3\047\uffd3\051\uffd3" +
    "\053\uffd3\054\uffd3\056\116\057\uffd3\001\002\000\022\034" +
    "\uffd0\035\uffd0\045\uffd0\047\uffd0\051\uffd0\053\uffd0\054\uffd0" +
    "\057\113\001\002\000\020\034\uffcd\035\uffcd\045\uffcd\047" +
    "\uffcd\051\uffcd\053\uffcd\054\110\001\002\000\052\004\uffff" +
    "\034\uffff\035\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff" +
    "\053\uffff\054\uffff\056\uffff\057\uffff\060\uffff\061\uffff\001" +
    "\002\000\026\030\uffed\031\uffed\032\uffed\033\uffed\040\uffed" +
    "\041\uffed\042\uffed\046\uffed\055\uffed\061\uffed\001\002\000" +
    "\006\047\154\053\105\001\002\000\052\004\ufffe\034\ufffe" +
    "\035\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\053\ufffe" +
    "\054\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\001\002\000" +
    "\036\034\uffdb\035\uffdb\040\uffdb\041\uffdb\042\126\043\127" +
    "\044\125\045\uffdb\047\uffdb\051\uffdb\053\uffdb\054\uffdb\056" +
    "\uffdb\057\uffdb\001\002\000\026\030\053\031\064\032\067" +
    "\033\056\040\050\041\065\042\057\046\073\055\051\061" +
    "\072\001\002\000\026\030\ufff2\031\ufff2\032\ufff2\033\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\046\ufff2\055\ufff2\061\ufff2\001" +
    "\002\000\040\007\022\010\100\017\004\020\005\022\023" +
    "\030\053\031\064\032\067\033\056\040\050\041\065\042" +
    "\057\046\073\055\051\061\072\001\002\000\016\007\022" +
    "\010\100\017\004\020\005\022\023\045\uffe6\001\002\000" +
    "\012\034\uffc6\035\uffc6\045\uffc6\047\uffc6\001\002\000\042" +
    "\034\uffe3\035\uffe3\037\144\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\045\uffe3\047\uffe3\051\uffe3\053\uffe3\054\uffe3" +
    "\056\uffe3\057\uffe3\060\145\001\002\000\006\034\140\045" +
    "\141\001\002\000\016\007\022\010\100\017\004\020\005" +
    "\022\023\045\uffe4\001\002\000\016\034\uffca\035\uffca\045" +
    "\uffca\047\uffca\051\uffca\053\105\001\002\000\004\045\103" +
    "\001\002\000\026\030\053\031\064\032\067\033\056\040" +
    "\050\041\065\042\057\046\073\055\051\061\072\001\002" +
    "\000\042\034\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\047\uffe2\051\uffe2\053\uffe2" +
    "\054\uffe2\056\uffe2\057\uffe2\060\uffe2\001\002\000\026\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\046\uffcc\055\uffcc\061\uffcc\001\002\000\026\030\053\031" +
    "\064\032\067\033\056\040\050\041\065\042\057\046\073" +
    "\055\051\061\072\001\002\000\020\034\uffcb\035\uffcb\045" +
    "\uffcb\047\uffcb\051\uffcb\053\uffcb\054\110\001\002\000\026" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\046\uffcf\055\uffcf\061\uffcf\001\002\000\026\030\053" +
    "\031\064\032\067\033\056\040\050\041\065\042\057\046" +
    "\073\055\051\061\072\001\002\000\022\034\uffce\035\uffce" +
    "\045\uffce\047\uffce\051\uffce\053\uffce\054\uffce\057\113\001" +
    "\002\000\026\030\uffd2\031\uffd2\032\uffd2\033\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\046\uffd2\055\uffd2\061\uffd2\001\002\000" +
    "\026\030\053\031\064\032\067\033\056\040\050\041\065" +
    "\042\057\046\073\055\051\061\072\001\002\000\024\034" +
    "\uffd1\035\uffd1\045\uffd1\047\uffd1\051\uffd1\053\uffd1\054\uffd1" +
    "\056\116\057\uffd1\001\002\000\026\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\040\uffd5\041\uffd5\042\uffd5\046\uffd5\055\uffd5" +
    "\061\uffd5\001\002\000\026\030\053\031\064\032\067\033" +
    "\056\040\050\041\065\042\057\046\073\055\051\061\072" +
    "\001\002\000\030\034\uffd4\035\uffd4\040\121\041\122\045" +
    "\uffd4\047\uffd4\051\uffd4\053\uffd4\054\uffd4\056\uffd4\057\uffd4" +
    "\001\002\000\026\030\uffda\031\uffda\032\uffda\033\uffda\040" +
    "\uffda\041\uffda\042\uffda\046\uffda\055\uffda\061\uffda\001\002" +
    "\000\026\030\uffd8\031\uffd8\032\uffd8\033\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\046\uffd8\055\uffd8\061\uffd8\001\002\000\026" +
    "\030\053\031\064\032\067\033\056\040\050\041\065\042" +
    "\057\046\073\055\051\061\072\001\002\000\036\034\uffd7" +
    "\035\uffd7\040\uffd7\041\uffd7\042\126\043\127\044\125\045" +
    "\uffd7\047\uffd7\051\uffd7\053\uffd7\054\uffd7\056\uffd7\057\uffd7" +
    "\001\002\000\026\030\053\031\064\032\067\033\056\040" +
    "\050\041\065\042\057\046\073\055\051\061\072\001\002" +
    "\000\026\030\uffe0\031\uffe0\032\uffe0\033\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\046\uffe0\055\uffe0\061\uffe0\001\002\000\026" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\040\uffde\041\uffde\042" +
    "\uffde\046\uffde\055\uffde\061\uffde\001\002\000\026\030\053" +
    "\031\064\032\067\033\056\040\050\041\065\042\057\046" +
    "\073\055\051\061\072\001\002\000\036\034\uffdd\035\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\047" +
    "\uffdd\051\uffdd\053\uffdd\054\uffdd\056\uffdd\057\uffdd\001\002" +
    "\000\026\030\053\031\064\032\067\033\056\040\050\041" +
    "\065\042\057\046\073\055\051\061\072\001\002\000\036" +
    "\034\uffdf\035\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\047\uffdf\051\uffdf\053\uffdf\054\uffdf\056\uffdf" +
    "\057\uffdf\001\002\000\036\034\uffdc\035\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\047\uffdc\051\uffdc" +
    "\053\uffdc\054\uffdc\056\uffdc\057\uffdc\001\002\000\026\030" +
    "\053\031\064\032\067\033\056\040\050\041\065\042\057" +
    "\046\073\055\051\061\072\001\002\000\036\034\uffd9\035" +
    "\uffd9\040\uffd9\041\uffd9\042\126\043\127\044\125\045\uffd9" +
    "\047\uffd9\051\uffd9\053\uffd9\054\uffd9\056\uffd9\057\uffd9\001" +
    "\002\000\004\045\uffe5\001\002\000\026\030\053\031\064" +
    "\032\067\033\056\040\050\041\065\042\057\046\073\055" +
    "\051\061\072\001\002\000\052\004\ufffc\034\ufffc\035\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045" +
    "\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\053\ufffc\054\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\061\ufffc\001\002\000\012\034" +
    "\uffc5\035\uffc5\045\uffc5\047\uffc5\001\002\000\026\030\053" +
    "\031\064\032\067\033\056\040\050\041\065\042\057\046" +
    "\073\055\051\061\072\001\002\000\026\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\040\uffc8\041\uffc8\042\uffc8\046\uffc8\055" +
    "\uffc8\061\uffc8\001\002\000\026\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\040\uffc7\041\uffc7\042\uffc7\046\uffc7\055\uffc7\061" +
    "\uffc7\001\002\000\014\034\uffc9\035\uffc9\045\uffc9\047\uffc9" +
    "\051\uffc9\001\002\000\004\045\uffe7\001\002\000\026\030" +
    "\053\031\064\032\067\033\056\040\050\041\065\042\057" +
    "\046\152\055\051\061\072\001\002\000\042\034\ufff1\035" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1" +
    "\045\ufff1\047\ufff1\051\ufff1\053\ufff1\054\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\001\002\000\026\030\053\031\064\032\067" +
    "\033\056\040\050\041\065\042\057\046\073\055\051\061" +
    "\072\001\002\000\042\034\ufff0\035\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0\047\ufff0\051" +
    "\ufff0\053\ufff0\054\ufff0\056\ufff0\057\ufff0\060\ufff0\001\002" +
    "\000\034\003\uffb2\007\uffb2\010\uffb2\017\uffb2\020\uffb2\022" +
    "\uffb2\034\uffb2\035\uffb2\037\uffb2\045\uffb2\046\uffb2\050\uffb2" +
    "\052\uffb2\001\002\000\052\004\ufff6\034\ufff6\035\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6\054\ufff6\056" +
    "\ufff6\057\ufff6\060\ufff6\061\ufff6\001\002\000\030\030\053" +
    "\031\064\032\067\033\056\040\050\041\065\042\057\045" +
    "\166\046\073\055\051\061\072\001\002\000\026\030\053" +
    "\031\064\032\067\033\056\040\050\041\065\042\057\046" +
    "\073\055\051\061\072\001\002\000\004\030\161\001\002" +
    "\000\052\004\ufff7\034\ufff7\035\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\053\ufff7\054\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\001\002\000\006\034\140\047\163\001\002" +
    "\000\052\004\ufffa\034\ufffa\035\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\053\ufffa\054\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\001\002\000\006\034\ufff5\045\ufff5\001\002" +
    "\000\006\034\167\045\170\001\002\000\052\004\ufff9\034" +
    "\ufff9\035\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\053" +
    "\ufff9\054\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\001\002" +
    "\000\026\030\053\031\064\032\067\033\056\040\050\041" +
    "\065\042\057\046\073\055\051\061\072\001\002\000\052" +
    "\004\ufff8\034\ufff8\035\ufff8\037\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8" +
    "\051\ufff8\053\ufff8\054\ufff8\056\ufff8\057\ufff8\060\ufff8\061" +
    "\ufff8\001\002\000\006\034\ufff4\045\ufff4\001\002\000\106" +
    "\002\uff68\003\uff68\005\uff68\006\uff68\007\uff68\010\uff68\011" +
    "\uff68\012\uff68\013\uff68\014\uff68\015\uff68\016\uff68\017\uff68" +
    "\020\uff68\021\uff68\022\uff68\023\uff68\024\uff68\025\uff68\026" +
    "\uff68\027\uff68\030\uff68\031\uff68\032\uff68\033\uff68\035\uff68" +
    "\040\uff68\041\uff68\042\uff68\046\uff68\051\uff68\052\uff68\055" +
    "\uff68\061\uff68\001\002\000\100\003\uff66\005\uff66\006\uff66" +
    "\007\uff66\010\uff66\011\uff66\012\uff66\013\uff66\015\uff66\016" +
    "\uff66\017\uff66\020\uff66\021\uff66\022\uff66\023\uff66\025\uff66" +
    "\026\uff66\027\uff66\030\uff66\031\uff66\032\uff66\033\uff66\035" +
    "\uff66\040\uff66\041\uff66\042\uff66\046\uff66\051\uff66\052\uff66" +
    "\055\uff66\061\uff66\001\002\000\026\002\uff64\003\uff64\007" +
    "\uff64\010\uff64\017\uff64\020\uff64\022\uff64\024\uff64\030\uff64" +
    "\046\uff64\001\002\000\010\034\uffaa\035\uffaa\051\uffaa\001" +
    "\002\000\030\030\053\031\064\032\067\033\056\040\050" +
    "\041\065\042\057\046\073\052\176\055\051\061\072\001" +
    "\002\000\006\034\uffa6\035\uffa6\001\002\000\006\034\202" +
    "\051\203\001\002\000\006\034\uffac\051\uffac\001\002\000" +
    "\032\030\053\031\064\032\067\033\056\040\050\041\065" +
    "\042\057\046\073\051\204\052\176\055\051\061\072\001" +
    "\002\000\010\034\uffa9\035\uffa9\051\uffa9\001\002\000\010" +
    "\034\uffa8\035\uffa8\051\uffa8\001\002\000\006\034\uffab\051" +
    "\uffab\001\002\000\006\034\uffb8\045\uffb8\001\002\000\006" +
    "\034\uffb6\045\uffb6\001\002\000\004\045\251\001\002\000" +
    "\006\034\246\045\247\001\002\000\034\003\uffae\007\uffae" +
    "\010\uffae\017\uffae\020\uffae\022\uffae\034\uffae\035\uffae\037" +
    "\uffae\045\uffae\046\uffae\050\uffae\052\uffae\001\002\000\014" +
    "\030\014\034\uffb9\045\uffb9\046\221\050\223\001\002\000" +
    "\006\034\215\045\216\001\002\000\014\007\022\010\024" +
    "\017\004\020\005\022\023\001\002\000\034\003\uffb0\007" +
    "\uffb0\010\uffb0\017\uffb0\020\uffb0\022\uffb0\034\uffb0\035\uffb0" +
    "\037\uffb0\045\uffb0\046\uffb0\050\uffb0\052\uffb0\001\002\000" +
    "\006\034\uffb7\045\uffb7\001\002\000\012\034\uffbb\045\uffbb" +
    "\046\036\050\043\001\002\000\024\007\022\010\024\017" +
    "\004\020\005\022\023\030\014\045\237\046\221\050\223" +
    "\001\002\000\012\034\uffba\045\uffba\046\227\050\230\001" +
    "\002\000\030\030\053\031\064\032\067\033\056\040\050" +
    "\041\065\042\057\046\073\047\224\055\051\061\072\001" +
    "\002\000\012\034\uffc3\045\uffc3\046\uffc3\050\uffc3\001\002" +
    "\000\006\047\226\053\105\001\002\000\012\034\uffc2\045" +
    "\uffc2\046\uffc2\050\uffc2\001\002\000\016\007\022\010\024" +
    "\017\004\020\005\022\023\045\234\001\002\000\030\030" +
    "\053\031\064\032\067\033\056\040\050\041\065\042\057" +
    "\046\073\047\231\055\051\061\072\001\002\000\012\034" +
    "\uffc1\045\uffc1\046\uffc1\050\uffc1\001\002\000\006\047\233" +
    "\053\105\001\002\000\012\034\uffc0\045\uffc0\046\uffc0\050" +
    "\uffc0\001\002\000\012\034\uffbd\045\uffbd\046\uffbd\050\uffbd" +
    "\001\002\000\006\034\215\045\236\001\002\000\012\034" +
    "\uffbc\045\uffbc\046\uffbc\050\uffbc\001\002\000\012\034\uffbf" +
    "\045\uffbf\046\uffbf\050\uffbf\001\002\000\010\045\245\046" +
    "\036\050\043\001\002\000\010\045\244\046\227\050\230" +
    "\001\002\000\006\034\215\045\243\001\002\000\012\034" +
    "\uffbe\045\uffbe\046\uffbe\050\uffbe\001\002\000\012\034\uffc4" +
    "\045\uffc4\046\uffc4\050\uffc4\001\002\000\034\003\uffb3\007" +
    "\uffb3\010\uffb3\017\uffb3\020\uffb3\022\uffb3\034\uffb3\035\uffb3" +
    "\037\uffb3\045\uffb3\046\uffb3\050\uffb3\052\uffb3\001\002\000" +
    "\004\030\250\001\002\000\034\003\uffaf\007\uffaf\010\uffaf" +
    "\017\uffaf\020\uffaf\022\uffaf\034\uffaf\035\uffaf\037\uffaf\045" +
    "\uffaf\046\uffaf\050\uffaf\052\uffaf\001\002\000\006\034\uffb5" +
    "\045\uffb5\001\002\000\034\003\uffad\007\uffad\010\uffad\017" +
    "\uffad\020\uffad\022\uffad\034\uffad\035\uffad\037\uffad\045\uffad" +
    "\046\uffad\050\uffad\052\uffad\001\002\000\100\003\270\005" +
    "\272\006\254\007\022\010\024\011\256\012\276\013\302" +
    "\015\260\016\264\017\004\020\005\021\267\022\023\023" +
    "\273\025\275\026\274\027\261\030\053\031\064\032\067" +
    "\033\056\035\262\040\050\041\065\042\057\046\073\051" +
    "\u0121\052\035\055\051\061\072\001\002\000\066\003\uff71" +
    "\005\uff71\006\uff71\011\uff71\012\uff71\013\uff71\015\uff71\016" +
    "\uff71\021\uff71\023\uff71\025\uff71\026\uff71\027\uff71\030\uff71" +
    "\031\uff71\032\uff71\033\uff71\035\uff71\040\uff71\041\uff71\042" +
    "\uff71\046\uff71\051\uff71\052\uff71\055\uff71\061\uff71\001\002" +
    "\000\010\003\u0119\031\u011a\032\u011b\001\002\000\066\003" +
    "\uff70\005\uff70\006\uff70\011\uff70\012\uff70\013\uff70\015\uff70" +
    "\016\uff70\021\uff70\023\uff70\025\uff70\026\uff70\027\uff70\030" +
    "\uff70\031\uff70\032\uff70\033\uff70\035\uff70\040\uff70\041\uff70" +
    "\042\uff70\046\uff70\051\uff70\052\uff70\055\uff70\061\uff70\001" +
    "\002\000\006\003\u0117\035\u0116\001\002\000\066\003\uff74" +
    "\005\uff74\006\uff74\011\uff74\012\uff74\013\uff74\015\uff74\016" +
    "\uff74\021\uff74\023\uff74\025\uff74\026\uff74\027\uff74\030\uff74" +
    "\031\uff74\032\uff74\033\uff74\035\uff74\040\uff74\041\uff74\042" +
    "\uff74\046\uff74\051\uff74\052\uff74\055\uff74\061\uff74\001\002" +
    "\000\006\003\u0106\046\u0107\001\002\000\004\046\u0102\001" +
    "\002\000\070\003\uff80\005\uff80\006\uff80\011\uff80\012\uff80" +
    "\013\uff80\015\uff80\016\uff80\021\uff80\023\uff80\025\uff80\026" +
    "\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\035\uff80" +
    "\040\uff80\041\uff80\042\uff80\045\uff80\046\uff80\051\uff80\052" +
    "\uff80\055\uff80\061\uff80\001\002\000\106\002\uff6c\003\uff6c" +
    "\005\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c\013" +
    "\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c" +
    "\022\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030" +
    "\uff6c\031\uff6c\032\uff6c\033\uff6c\035\uff6c\040\uff6c\041\uff6c" +
    "\042\uff6c\046\uff6c\051\uff6c\052\uff6c\055\uff6c\061\uff6c\001" +
    "\002\000\006\003\366\046\uff88\001\002\000\006\034\140" +
    "\035\365\001\002\000\066\003\uff6e\005\uff6e\006\uff6e\011" +
    "\uff6e\012\uff6e\013\uff6e\015\uff6e\016\uff6e\021\uff6e\023\uff6e" +
    "\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033" +
    "\uff6e\035\uff6e\040\uff6e\041\uff6e\042\uff6e\046\uff6e\051\uff6e" +
    "\052\uff6e\055\uff6e\061\uff6e\001\002\000\032\003\362\030" +
    "\053\031\064\032\067\033\056\035\360\040\050\041\065" +
    "\042\057\046\073\055\051\061\072\001\002\000\006\035" +
    "\357\051\172\001\002\000\066\003\uff72\005\uff72\006\uff72" +
    "\011\uff72\012\uff72\013\uff72\015\uff72\016\uff72\021\uff72\023" +
    "\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72" +
    "\033\uff72\035\uff72\040\uff72\041\uff72\042\uff72\046\uff72\051" +
    "\uff72\052\uff72\055\uff72\061\uff72\001\002\000\006\003\355" +
    "\035\354\001\002\000\006\003\340\046\341\001\002\000" +
    "\004\046\332\001\002\000\006\003\322\046\uff95\001\002" +
    "\000\006\003\316\036\317\001\002\000\066\003\uff6f\005" +
    "\uff6f\006\uff6f\011\uff6f\012\uff6f\013\uff6f\015\uff6f\016\uff6f" +
    "\021\uff6f\023\uff6f\025\uff6f\026\uff6f\027\uff6f\030\uff6f\031" +
    "\uff6f\032\uff6f\033\uff6f\035\uff6f\040\uff6f\041\uff6f\042\uff6f" +
    "\046\uff6f\051\uff6f\052\uff6f\055\uff6f\061\uff6f\001\002\000" +
    "\066\003\uff73\005\uff73\006\uff73\011\uff73\012\uff73\013\uff73" +
    "\015\uff73\016\uff73\021\uff73\023\uff73\025\uff73\026\uff73\027" +
    "\uff73\030\uff73\031\uff73\032\uff73\033\uff73\035\uff73\040\uff73" +
    "\041\uff73\042\uff73\046\uff73\051\uff73\052\uff73\055\uff73\061" +
    "\uff73\001\002\000\066\003\uff75\005\uff75\006\uff75\011\uff75" +
    "\012\uff75\013\uff75\015\uff75\016\uff75\021\uff75\023\uff75\025" +
    "\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75" +
    "\035\uff75\040\uff75\041\uff75\042\uff75\046\uff75\051\uff75\052" +
    "\uff75\055\uff75\061\uff75\001\002\000\006\003\306\052\035" +
    "\001\002\000\066\003\270\005\272\006\254\011\256\012" +
    "\276\013\302\015\260\016\264\021\267\023\273\025\275" +
    "\026\274\027\261\030\053\031\064\032\067\033\056\035" +
    "\262\040\050\041\065\042\057\046\073\051\304\052\035" +
    "\055\051\061\072\001\002\000\106\002\uff6b\003\uff6b\005" +
    "\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b" +
    "\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\022" +
    "\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b" +
    "\031\uff6b\032\uff6b\033\uff6b\035\uff6b\040\uff6b\041\uff6b\042" +
    "\uff6b\046\uff6b\051\uff6b\052\uff6b\055\uff6b\061\uff6b\001\002" +
    "\000\066\003\uff6d\005\uff6d\006\uff6d\011\uff6d\012\uff6d\013" +
    "\uff6d\015\uff6d\016\uff6d\021\uff6d\023\uff6d\025\uff6d\026\uff6d" +
    "\027\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d\035\uff6d\040" +
    "\uff6d\041\uff6d\042\uff6d\046\uff6d\051\uff6d\052\uff6d\055\uff6d" +
    "\061\uff6d\001\002\000\006\035\315\051\172\001\002\000" +
    "\004\025\310\001\002\000\004\046\311\001\002\000\026" +
    "\030\053\031\064\032\067\033\056\040\050\041\065\042" +
    "\057\046\073\055\051\061\072\001\002\000\006\034\140" +
    "\045\313\001\002\000\004\035\314\001\002\000\066\003" +
    "\uff91\005\uff91\006\uff91\011\uff91\012\uff91\013\uff91\015\uff91" +
    "\016\uff91\021\uff91\023\uff91\025\uff91\026\uff91\027\uff91\030" +
    "\uff91\031\uff91\032\uff91\033\uff91\035\uff91\040\uff91\041\uff91" +
    "\042\uff91\046\uff91\051\uff91\052\uff91\055\uff91\061\uff91\001" +
    "\002\000\066\003\uff90\005\uff90\006\uff90\011\uff90\012\uff90" +
    "\013\uff90\015\uff90\016\uff90\021\uff90\023\uff90\025\uff90\026" +
    "\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\035\uff90" +
    "\040\uff90\041\uff90\042\uff90\046\uff90\051\uff90\052\uff90\055" +
    "\uff90\061\uff90\001\002\000\064\003\270\005\272\006\254" +
    "\011\256\012\276\013\302\015\260\016\264\021\267\023" +
    "\273\025\275\026\274\027\261\030\053\031\064\032\067" +
    "\033\056\035\262\040\050\041\065\042\057\046\073\052" +
    "\035\055\051\061\072\001\002\000\064\003\270\005\272" +
    "\006\254\011\256\012\276\013\302\015\260\016\264\021" +
    "\267\023\273\025\275\026\274\027\261\030\053\031\064" +
    "\032\067\033\056\035\262\040\050\041\065\042\057\046" +
    "\073\052\035\055\051\061\072\001\002\000\066\003\uff7a" +
    "\005\uff7a\006\uff7a\011\uff7a\012\uff7a\013\uff7a\015\uff7a\016" +
    "\uff7a\021\uff7a\023\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a" +
    "\031\uff7a\032\uff7a\033\uff7a\035\uff7a\040\uff7a\041\uff7a\042" +
    "\uff7a\046\uff7a\051\uff7a\052\uff7a\055\uff7a\061\uff7a\001\002" +
    "\000\066\003\uff79\005\uff79\006\uff79\011\uff79\012\uff79\013" +
    "\uff79\015\uff79\016\uff79\021\uff79\023\uff79\025\uff79\026\uff79" +
    "\027\uff79\030\uff79\031\uff79\032\uff79\033\uff79\035\uff79\040" +
    "\uff79\041\uff79\042\uff79\046\uff79\051\uff79\052\uff79\055\uff79" +
    "\061\uff79\001\002\000\006\003\042\052\035\001\002\000" +
    "\004\046\324\001\002\000\026\030\053\031\064\032\067" +
    "\033\056\040\050\041\065\042\057\046\073\055\051\061" +
    "\072\001\002\000\006\034\140\045\326\001\002\000\006" +
    "\003\uff94\052\uff94\001\002\000\006\003\042\052\035\001" +
    "\002\000\066\003\uff93\005\uff93\006\uff93\011\uff93\012\uff93" +
    "\013\uff93\015\uff93\016\uff93\021\uff93\023\uff93\025\uff93\026" +
    "\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\035\uff93" +
    "\040\uff93\041\uff93\042\uff93\046\uff93\051\uff93\052\uff93\055" +
    "\uff93\061\uff93\001\002\000\066\003\uff92\005\uff92\006\uff92" +
    "\011\uff92\012\uff92\013\uff92\015\uff92\016\uff92\021\uff92\023" +
    "\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\035\uff92\040\uff92\041\uff92\042\uff92\046\uff92\051" +
    "\uff92\052\uff92\055\uff92\061\uff92\001\002\000\006\030\333" +
    "\045\334\001\002\000\004\045\336\001\002\000\004\035" +
    "\335\001\002\000\066\003\uff78\005\uff78\006\uff78\011\uff78" +
    "\012\uff78\013\uff78\015\uff78\016\uff78\021\uff78\023\uff78\025" +
    "\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78\033\uff78" +
    "\035\uff78\040\uff78\041\uff78\042\uff78\046\uff78\051\uff78\052" +
    "\uff78\055\uff78\061\uff78\001\002\000\004\035\337\001\002" +
    "\000\066\003\uff77\005\uff77\006\uff77\011\uff77\012\uff77\013" +
    "\uff77\015\uff77\016\uff77\021\uff77\023\uff77\025\uff77\026\uff77" +
    "\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\035\uff77\040" +
    "\uff77\041\uff77\042\uff77\046\uff77\051\uff77\052\uff77\055\uff77" +
    "\061\uff77\001\002\000\006\003\042\052\035\001\002\000" +
    "\010\030\342\031\343\032\344\001\002\000\004\045\351" +
    "\001\002\000\004\045\347\001\002\000\004\045\345\001" +
    "\002\000\006\003\042\052\035\001\002\000\066\003\uff83" +
    "\005\uff83\006\uff83\011\uff83\012\uff83\013\uff83\015\uff83\016" +
    "\uff83\021\uff83\023\uff83\025\uff83\026\uff83\027\uff83\030\uff83" +
    "\031\uff83\032\uff83\033\uff83\035\uff83\040\uff83\041\uff83\042" +
    "\uff83\046\uff83\051\uff83\052\uff83\055\uff83\061\uff83\001\002" +
    "\000\006\003\042\052\035\001\002\000\066\003\uff84\005" +
    "\uff84\006\uff84\011\uff84\012\uff84\013\uff84\015\uff84\016\uff84" +
    "\021\uff84\023\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031" +
    "\uff84\032\uff84\033\uff84\035\uff84\040\uff84\041\uff84\042\uff84" +
    "\046\uff84\051\uff84\052\uff84\055\uff84\061\uff84\001\002\000" +
    "\064\003\270\005\272\006\254\011\256\012\276\013\302" +
    "\015\260\016\264\021\267\023\273\025\275\026\274\027" +
    "\261\030\053\031\064\032\067\033\056\035\262\040\050" +
    "\041\065\042\057\046\073\052\035\055\051\061\072\001" +
    "\002\000\066\003\uff82\005\uff82\006\uff82\011\uff82\012\uff82" +
    "\013\uff82\015\uff82\016\uff82\021\uff82\023\uff82\025\uff82\026" +
    "\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033\uff82\035\uff82" +
    "\040\uff82\041\uff82\042\uff82\046\uff82\051\uff82\052\uff82\055" +
    "\uff82\061\uff82\001\002\000\066\003\uff81\005\uff81\006\uff81" +
    "\011\uff81\012\uff81\013\uff81\015\uff81\016\uff81\021\uff81\023" +
    "\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\032\uff81" +
    "\033\uff81\035\uff81\040\uff81\041\uff81\042\uff81\046\uff81\051" +
    "\uff81\052\uff81\055\uff81\061\uff81\001\002\000\066\003\uff9b" +
    "\005\uff9b\006\uff9b\011\uff9b\012\uff9b\013\uff9b\015\uff9b\016" +
    "\uff9b\021\uff9b\023\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\035\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\046\uff9b\051\uff9b\052\uff9b\055\uff9b\061\uff9b\001\002" +
    "\000\004\035\356\001\002\000\066\003\uff97\005\uff97\006" +
    "\uff97\011\uff97\012\uff97\013\uff97\015\uff97\016\uff97\021\uff97" +
    "\023\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032" +
    "\uff97\033\uff97\035\uff97\040\uff97\041\uff97\042\uff97\046\uff97" +
    "\051\uff97\052\uff97\055\uff97\061\uff97\001\002\000\070\003" +
    "\uff7e\005\uff7e\006\uff7e\011\uff7e\012\uff7e\013\uff7e\015\uff7e" +
    "\016\uff7e\021\uff7e\023\uff7e\025\uff7e\026\uff7e\027\uff7e\030" +
    "\uff7e\031\uff7e\032\uff7e\033\uff7e\035\uff7e\040\uff7e\041\uff7e" +
    "\042\uff7e\045\uff7e\046\uff7e\051\uff7e\052\uff7e\055\uff7e\061" +
    "\uff7e\001\002\000\066\003\uff9a\005\uff9a\006\uff9a\011\uff9a" +
    "\012\uff9a\013\uff9a\015\uff9a\016\uff9a\021\uff9a\023\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a" +
    "\035\uff9a\040\uff9a\041\uff9a\042\uff9a\046\uff9a\051\uff9a\052" +
    "\uff9a\055\uff9a\061\uff9a\001\002\000\006\034\140\035\364" +
    "\001\002\000\004\035\363\001\002\000\066\003\uff96\005" +
    "\uff96\006\uff96\011\uff96\012\uff96\013\uff96\015\uff96\016\uff96" +
    "\021\uff96\023\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\033\uff96\035\uff96\040\uff96\041\uff96\042\uff96" +
    "\046\uff96\051\uff96\052\uff96\055\uff96\061\uff96\001\002\000" +
    "\066\003\uff99\005\uff99\006\uff99\011\uff99\012\uff99\013\uff99" +
    "\015\uff99\016\uff99\021\uff99\023\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\031\uff99\032\uff99\033\uff99\035\uff99\040\uff99" +
    "\041\uff99\042\uff99\046\uff99\051\uff99\052\uff99\055\uff99\061" +
    "\uff99\001\002\000\070\003\uff7f\005\uff7f\006\uff7f\011\uff7f" +
    "\012\uff7f\013\uff7f\015\uff7f\016\uff7f\021\uff7f\023\uff7f\025" +
    "\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f" +
    "\035\uff7f\040\uff7f\041\uff7f\042\uff7f\045\uff7f\046\uff7f\051" +
    "\uff7f\052\uff7f\055\uff7f\061\uff7f\001\002\000\006\003\042" +
    "\052\035\001\002\000\004\046\370\001\002\000\026\030" +
    "\053\031\064\032\067\033\056\040\050\041\065\042\057" +
    "\046\073\055\051\061\072\001\002\000\006\034\140\045" +
    "\372\001\002\000\006\003\uff87\052\uff87\001\002\000\006" +
    "\003\042\052\035\001\002\000\066\003\uff86\005\uff86\006" +
    "\uff86\011\uff86\012\uff86\013\uff86\015\uff86\016\uff86\021\uff86" +
    "\023\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032" +
    "\uff86\033\uff86\035\uff86\040\uff86\041\uff86\042\uff86\046\uff86" +
    "\051\uff86\052\uff86\055\uff86\061\uff86\001\002\000\070\003" +
    "\uff8b\005\uff8b\006\uff8b\011\uff8b\012\uff8b\013\uff8b\014\376" +
    "\015\uff8b\016\uff8b\021\uff8b\023\uff8b\025\uff8b\026\uff8b\027" +
    "\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\035\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\046\uff8b\051\uff8b\052\uff8b\055\uff8b\061" +
    "\uff8b\001\002\000\064\003\uff8a\005\uff8a\006\uff8a\011\uff8a" +
    "\012\uff8a\013\uff8a\015\uff8a\016\uff8a\021\uff8a\023\uff8a\025" +
    "\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a" +
    "\035\uff8a\040\uff8a\041\uff8a\042\uff8a\046\uff8a\052\uff8a\055" +
    "\uff8a\061\uff8a\001\002\000\064\003\270\005\272\006\254" +
    "\011\256\012\276\013\302\015\260\016\264\021\267\023" +
    "\273\025\275\026\274\027\261\030\053\031\064\032\067" +
    "\033\056\035\262\040\050\041\065\042\057\046\073\052" +
    "\035\055\051\061\072\001\002\000\066\003\uff89\005\uff89" +
    "\006\uff89\011\uff89\012\uff89\013\uff89\015\uff89\016\uff89\021" +
    "\uff89\023\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89" +
    "\032\uff89\033\uff89\035\uff89\040\uff89\041\uff89\042\uff89\046" +
    "\uff89\051\uff89\052\uff89\055\uff89\061\uff89\001\002\000\066" +
    "\003\uff85\005\uff85\006\uff85\011\uff85\012\uff85\013\uff85\015" +
    "\uff85\016\uff85\021\uff85\023\uff85\025\uff85\026\uff85\027\uff85" +
    "\030\uff85\031\uff85\032\uff85\033\uff85\035\uff85\040\uff85\041" +
    "\uff85\042\uff85\046\uff85\051\uff85\052\uff85\055\uff85\061\uff85" +
    "\001\002\000\026\030\053\031\064\032\067\033\056\040" +
    "\050\041\065\042\057\046\073\055\051\061\072\001\002" +
    "\000\006\034\140\045\u0104\001\002\000\004\035\u0105\001" +
    "\002\000\066\003\uff76\005\uff76\006\uff76\011\uff76\012\uff76" +
    "\013\uff76\015\uff76\016\uff76\021\uff76\023\uff76\025\uff76\026" +
    "\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76\035\uff76" +
    "\040\uff76\041\uff76\042\uff76\046\uff76\051\uff76\052\uff76\055" +
    "\uff76\061\uff76\001\002\000\006\003\042\052\035\001\002" +
    "\000\044\003\u010a\007\022\010\024\017\004\020\005\022" +
    "\023\030\053\031\064\032\067\033\056\035\262\040\050" +
    "\041\065\042\057\046\073\055\051\061\072\001\002\000" +
    "\032\003\u010a\030\053\031\064\032\067\033\056\035\262" +
    "\040\050\041\065\042\057\046\073\055\051\061\072\001" +
    "\002\000\032\003\u010a\030\053\031\064\032\067\033\056" +
    "\035\262\040\050\041\065\042\057\046\073\055\051\061" +
    "\072\001\002\000\004\035\357\001\002\000\030\030\053" +
    "\031\064\032\067\033\056\040\050\041\065\042\057\045" +
    "\u010d\046\073\055\051\061\072\001\002\000\006\034\140" +
    "\045\u010f\001\002\000\006\003\042\052\035\001\002\000" +
    "\066\003\uff8f\005\uff8f\006\uff8f\011\uff8f\012\uff8f\013\uff8f" +
    "\015\uff8f\016\uff8f\021\uff8f\023\uff8f\025\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\035\uff8f\040\uff8f" +
    "\041\uff8f\042\uff8f\046\uff8f\051\uff8f\052\uff8f\055\uff8f\061" +
    "\uff8f\001\002\000\006\003\042\052\035\001\002\000\066" +
    "\003\uff8e\005\uff8e\006\uff8e\011\uff8e\012\uff8e\013\uff8e\015" +
    "\uff8e\016\uff8e\021\uff8e\023\uff8e\025\uff8e\026\uff8e\027\uff8e" +
    "\030\uff8e\031\uff8e\032\uff8e\033\uff8e\035\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\046\uff8e\051\uff8e\052\uff8e\055\uff8e\061\uff8e" +
    "\001\002\000\026\030\053\031\064\032\067\033\056\040" +
    "\050\041\065\042\057\046\073\055\051\061\072\001\002" +
    "\000\006\034\140\045\u0113\001\002\000\006\003\042\052" +
    "\035\001\002\000\066\003\uff8d\005\uff8d\006\uff8d\011\uff8d" +
    "\012\uff8d\013\uff8d\015\uff8d\016\uff8d\021\uff8d\023\uff8d\025" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d" +
    "\035\uff8d\040\uff8d\041\uff8d\042\uff8d\046\uff8d\051\uff8d\052" +
    "\uff8d\055\uff8d\061\uff8d\001\002\000\066\003\uff8c\005\uff8c" +
    "\006\uff8c\011\uff8c\012\uff8c\013\uff8c\015\uff8c\016\uff8c\021" +
    "\uff8c\023\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c" +
    "\032\uff8c\033\uff8c\035\uff8c\040\uff8c\041\uff8c\042\uff8c\046" +
    "\uff8c\051\uff8c\052\uff8c\055\uff8c\061\uff8c\001\002\000\066" +
    "\003\uff9c\005\uff9c\006\uff9c\011\uff9c\012\uff9c\013\uff9c\015" +
    "\uff9c\016\uff9c\021\uff9c\023\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\035\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\046\uff9c\051\uff9c\052\uff9c\055\uff9c\061\uff9c" +
    "\001\002\000\004\035\u0118\001\002\000\066\003\uff98\005" +
    "\uff98\006\uff98\011\uff98\012\uff98\013\uff98\015\uff98\016\uff98" +
    "\021\uff98\023\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\035\uff98\040\uff98\041\uff98\042\uff98" +
    "\046\uff98\051\uff98\052\uff98\055\uff98\061\uff98\001\002\000" +
    "\064\003\270\005\272\006\254\011\256\012\276\013\302" +
    "\015\260\016\264\021\267\023\273\025\275\026\274\027" +
    "\261\030\053\031\064\032\067\033\056\035\262\040\050" +
    "\041\065\042\057\046\073\052\035\055\051\061\072\001" +
    "\002\000\004\036\u011e\001\002\000\004\036\u011c\001\002" +
    "\000\064\003\270\005\272\006\254\011\256\012\276\013" +
    "\302\015\260\016\264\021\267\023\273\025\275\026\274" +
    "\027\261\030\053\031\064\032\067\033\056\035\262\040" +
    "\050\041\065\042\057\046\073\052\035\055\051\061\072" +
    "\001\002\000\066\003\uff7c\005\uff7c\006\uff7c\011\uff7c\012" +
    "\uff7c\013\uff7c\015\uff7c\016\uff7c\021\uff7c\023\uff7c\025\uff7c" +
    "\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\035" +
    "\uff7c\040\uff7c\041\uff7c\042\uff7c\046\uff7c\051\uff7c\052\uff7c" +
    "\055\uff7c\061\uff7c\001\002\000\064\003\270\005\272\006" +
    "\254\011\256\012\276\013\302\015\260\016\264\021\267" +
    "\023\273\025\275\026\274\027\261\030\053\031\064\032" +
    "\067\033\056\035\262\040\050\041\065\042\057\046\073" +
    "\052\035\055\051\061\072\001\002\000\066\003\uff7d\005" +
    "\uff7d\006\uff7d\011\uff7d\012\uff7d\013\uff7d\015\uff7d\016\uff7d" +
    "\021\uff7d\023\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031" +
    "\uff7d\032\uff7d\033\uff7d\035\uff7d\040\uff7d\041\uff7d\042\uff7d" +
    "\046\uff7d\051\uff7d\052\uff7d\055\uff7d\061\uff7d\001\002\000" +
    "\066\003\uff7b\005\uff7b\006\uff7b\011\uff7b\012\uff7b\013\uff7b" +
    "\015\uff7b\016\uff7b\021\uff7b\023\uff7b\025\uff7b\026\uff7b\027" +
    "\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\035\uff7b\040\uff7b" +
    "\041\uff7b\042\uff7b\046\uff7b\051\uff7b\052\uff7b\055\uff7b\061" +
    "\uff7b\001\002\000\106\002\uff6a\003\uff6a\005\uff6a\006\uff6a" +
    "\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a\015" +
    "\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a" +
    "\024\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032" +
    "\uff6a\033\uff6a\035\uff6a\040\uff6a\041\uff6a\042\uff6a\046\uff6a" +
    "\051\uff6a\052\uff6a\055\uff6a\061\uff6a\001\002\000\066\003" +
    "\270\005\272\006\254\011\256\012\276\013\302\015\260" +
    "\016\264\021\267\023\273\025\275\026\274\027\261\030" +
    "\053\031\064\032\067\033\056\035\262\040\050\041\065" +
    "\042\057\046\073\051\u0123\052\035\055\051\061\072\001" +
    "\002\000\106\002\uff69\003\uff69\005\uff69\006\uff69\007\uff69" +
    "\010\uff69\011\uff69\012\uff69\013\uff69\014\uff69\015\uff69\016" +
    "\uff69\017\uff69\020\uff69\021\uff69\022\uff69\023\uff69\024\uff69" +
    "\025\uff69\026\uff69\027\uff69\030\uff69\031\uff69\032\uff69\033" +
    "\uff69\035\uff69\040\uff69\041\uff69\042\uff69\046\uff69\051\uff69" +
    "\052\uff69\055\uff69\061\uff69\001\002\000\006\030\014\046" +
    "\010\001\002\000\104\002\uff9e\003\uff9e\005\uff9e\006\uff9e" +
    "\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\015\uff9e\016" +
    "\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e" +
    "\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\035\uff9e\040\uff9e\041\uff9e\042\uff9e\046\uff9e\051\uff9e" +
    "\052\uff9e\055\uff9e\061\uff9e\001\002\000\006\034\uffa4\035" +
    "\uffa4\001\002\000\024\003\042\007\022\010\024\017\004" +
    "\020\005\022\023\046\036\050\043\052\035\001\002\000" +
    "\026\002\uff61\003\uff61\007\uff61\010\uff61\017\uff61\020\uff61" +
    "\022\uff61\024\uff61\030\uff61\046\uff61\001\002\000\020\003" +
    "\042\007\022\010\024\017\004\020\005\022\023\052\035" +
    "\001\002\000\026\002\uff63\003\uff63\007\uff63\010\uff63\017" +
    "\uff63\020\uff63\022\uff63\024\uff63\030\uff63\046\uff63\001\002" +
    "\000\026\002\uff5f\003\uff5f\007\uff5f\010\uff5f\017\uff5f\020" +
    "\uff5f\022\uff5f\024\uff5f\030\uff5f\046\uff5f\001\002\000\020" +
    "\003\042\007\022\010\024\017\004\020\005\022\023\052" +
    "\035\001\002\000\026\002\uff60\003\uff60\007\uff60\010\uff60" +
    "\017\uff60\020\uff60\022\uff60\024\uff60\030\uff60\046\uff60\001" +
    "\002\000\026\002\uff5b\003\uff5b\007\uff5b\010\uff5b\017\uff5b" +
    "\020\uff5b\022\uff5b\024\uff5b\030\uff5b\046\uff5b\001\002\000" +
    "\026\002\uff5e\003\uff5e\007\uff5e\010\uff5e\017\uff5e\020\uff5e" +
    "\022\uff5e\024\uff5e\030\uff5e\046\uff5e\001\002\000\026\002" +
    "\uff5a\003\uff5a\007\uff5a\010\uff5a\017\uff5a\020\uff5a\022\uff5a" +
    "\024\uff5a\030\uff5a\046\uff5a\001\002\000\020\003\uffa2\030" +
    "\uffa2\034\uffa2\035\uffa2\045\uffa2\046\uffa2\050\uffa2\001\002" +
    "\000\004\002\001\001\002\000\026\002\uff58\003\uff58\007" +
    "\uff58\010\uff58\017\uff58\020\uff58\022\uff58\024\uff58\030\uff58" +
    "\046\uff58\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\022\007\012\027\015\034\017\035\006\050" +
    "\016\051\005\052\020\053\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\237\001\001\000\002\001\001\000\020\007\012" +
    "\027\015\034\017\035\006\050\016\051\005\052\u0132\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\u012e" +
    "\001\001\000\014\007\012\034\043\035\033\046\u012a\047" +
    "\u012b\001\001\000\004\027\u0126\001\001\000\010\027\027" +
    "\032\031\033\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\012\034\043\035\033\046\037\047\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\002\045\003\054\005\075\006\070\007\012" +
    "\011\046\012\067\013\057\014\060\015\061\016\062\017" +
    "\100\020\074\022\264\034\043\035\033\036\254\037\252" +
    "\040\270\041\277\042\300\043\265\044\302\045\276\046" +
    "\256\047\251\001\001\000\014\007\012\024\205\025\213" +
    "\026\210\034\212\001\001\000\034\002\045\003\054\005" +
    "\075\006\070\011\046\012\067\013\057\014\060\015\061" +
    "\016\062\017\100\020\174\031\176\001\001\000\002\001" +
    "\001\000\012\007\012\034\043\035\172\046\173\001\001" +
    "\000\002\001\001\000\030\002\045\003\054\005\051\006" +
    "\070\011\046\012\067\013\057\014\060\015\061\016\062" +
    "\017\065\001\001\000\010\027\044\032\031\033\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\045\003\054\005\051\006\070" +
    "\011\152\001\001\000\004\055\147\001\001\000\040\002" +
    "\045\003\054\005\075\006\070\007\073\010\101\011\046" +
    "\012\067\013\057\014\060\015\061\016\062\017\100\020" +
    "\074\022\076\001\001\000\006\007\073\010\146\001\001" +
    "\000\002\001\001\000\004\021\142\001\001\000\002\001" +
    "\001\000\006\007\073\010\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\045\003\054\005\051\006" +
    "\070\011\103\001\001\000\002\001\001\000\004\065\105" +
    "\001\001\000\026\002\045\003\054\005\051\006\070\011" +
    "\046\012\067\013\057\014\060\015\061\016\106\001\001" +
    "\000\002\001\001\000\004\064\110\001\001\000\024\002" +
    "\045\003\054\005\051\006\070\011\046\012\067\013\057" +
    "\014\060\015\111\001\001\000\002\001\001\000\004\063" +
    "\113\001\001\000\022\002\045\003\054\005\051\006\070" +
    "\011\046\012\067\013\057\014\114\001\001\000\002\001" +
    "\001\000\004\062\116\001\001\000\020\002\045\003\054" +
    "\005\051\006\070\011\046\012\067\013\117\001\001\000" +
    "\002\001\001\000\004\060\134\001\001\000\004\061\122" +
    "\001\001\000\016\002\045\003\054\005\051\006\070\011" +
    "\046\012\123\001\001\000\002\001\001\000\014\002\045" +
    "\003\054\005\051\006\070\011\133\001\001\000\004\056" +
    "\131\001\001\000\004\057\127\001\001\000\014\002\045" +
    "\003\054\005\051\006\070\011\130\001\001\000\002\001" +
    "\001\000\014\002\045\003\054\005\051\006\070\011\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\045\003\054\005\051\006\070\011\046\012\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\002\045\003" +
    "\054\005\075\006\070\011\046\012\067\013\057\014\060" +
    "\015\061\016\062\017\100\020\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\045\003\054\005\075" +
    "\006\070\011\046\012\067\013\057\014\060\015\061\016" +
    "\062\017\100\020\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\045\003\054\005\150\006\070\001\001\000\002\001\001" +
    "\000\034\002\045\003\054\005\075\006\070\011\046\012" +
    "\067\013\057\014\060\015\061\016\062\017\100\020\074" +
    "\022\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\045\003\054\004\164\005\075" +
    "\006\070\011\046\012\067\013\057\014\060\015\061\016" +
    "\062\017\100\020\163\001\001\000\034\002\045\003\054" +
    "\005\075\006\070\011\046\012\067\013\057\014\060\015" +
    "\061\016\062\017\100\020\074\022\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\045\003\054\005\075\006\070\011\046\012" +
    "\067\013\057\014\060\015\061\016\062\017\100\020\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\002\045\003\054\005\075\006\070\011\046\012" +
    "\067\013\057\014\060\015\061\016\062\017\100\020\174" +
    "\030\177\031\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\045\003\054\005\075" +
    "\006\070\011\046\012\067\013\057\014\060\015\061\016" +
    "\062\017\100\020\174\031\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\221\027\217\001\001\000\002\001" +
    "\001\000\010\007\012\024\216\034\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\012\023\240\024\205\025\241\027\237\034\212\001\001" +
    "\000\002\001\001\000\030\002\045\003\054\005\051\006" +
    "\070\011\046\012\067\013\057\014\060\015\061\016\062" +
    "\017\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\012\024\205\025\234\034\212" +
    "\001\001\000\030\002\045\003\054\005\051\006\070\011" +
    "\046\012\067\013\057\014\060\015\061\016\062\017\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\002\045\003\054\005\075" +
    "\006\070\007\012\011\046\012\067\013\057\014\060\015" +
    "\061\016\062\017\100\020\074\022\264\034\043\035\172" +
    "\036\254\037\252\040\270\041\277\042\300\043\265\044" +
    "\u0121\045\276\046\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\002\045\003\054\005\075" +
    "\006\070\011\046\012\067\013\057\014\060\015\061\016" +
    "\062\017\100\020\074\022\360\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\306\001\001\000\054\002\045\003\054\005\075" +
    "\006\070\011\046\012\067\013\057\014\060\015\061\016" +
    "\062\017\100\020\074\022\264\036\254\037\252\040\270" +
    "\041\277\042\300\043\304\045\276\046\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\002\045\003\054\005" +
    "\075\006\070\011\046\012\067\013\057\014\060\015\061" +
    "\016\062\017\100\020\074\022\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\002\045\003\054\005\075\006\070\011\046\012" +
    "\067\013\057\014\060\015\061\016\062\017\100\020\074" +
    "\022\264\036\254\037\252\040\270\041\277\042\300\043" +
    "\320\045\276\046\256\001\001\000\054\002\045\003\054" +
    "\005\075\006\070\011\046\012\067\013\057\014\060\015" +
    "\061\016\062\017\100\020\074\022\264\036\254\037\252" +
    "\040\270\041\277\042\300\043\317\045\276\046\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\330" +
    "\001\001\000\002\001\001\000\034\002\045\003\054\005" +
    "\075\006\070\011\046\012\067\013\057\014\060\015\061" +
    "\016\062\017\100\020\074\022\324\001\001\000\002\001" +
    "\001\000\004\067\326\001\001\000\004\046\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\352\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\345\001\001\000\002\001\001\000" +
    "\004\046\347\001\001\000\002\001\001\000\054\002\045" +
    "\003\054\005\075\006\070\011\046\012\067\013\057\014" +
    "\060\015\061\016\062\017\100\020\074\022\264\036\254" +
    "\037\252\040\270\041\277\042\300\043\351\045\276\046" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0100\001\001\000\002\001\001\000\034\002\045" +
    "\003\054\005\075\006\070\011\046\012\067\013\057\014" +
    "\060\015\061\016\062\017\100\020\074\022\370\001\001" +
    "\000\002\001\001\000\004\072\372\001\001\000\006\046" +
    "\374\054\373\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\376\001\001\000\054\002\045\003\054\005" +
    "\075\006\070\011\046\012\067\013\057\014\060\015\061" +
    "\016\062\017\100\020\074\022\264\036\254\037\252\040" +
    "\270\041\277\042\300\043\377\045\276\046\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\045\003" +
    "\054\005\075\006\070\011\046\012\067\013\057\014\060" +
    "\015\061\016\062\017\100\020\074\022\u0102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u0114\001\001\000\044\002\045\003\054\005\075\006" +
    "\070\007\012\011\046\012\067\013\057\014\060\015\061" +
    "\016\062\017\100\020\074\022\264\034\043\035\u0107\041" +
    "\u0108\001\001\000\036\002\045\003\054\005\075\006\070" +
    "\011\046\012\067\013\057\014\060\015\061\016\062\017" +
    "\100\020\074\022\264\041\u0110\001\001\000\036\002\045" +
    "\003\054\005\075\006\070\011\046\012\067\013\057\014" +
    "\060\015\061\016\062\017\100\020\074\022\264\041\u010a" +
    "\001\001\000\002\001\001\000\034\002\045\003\054\005" +
    "\075\006\070\011\046\012\067\013\057\014\060\015\061" +
    "\016\062\017\100\020\074\022\u010b\001\001\000\002\001" +
    "\001\000\004\046\u010d\001\001\000\002\001\001\000\004" +
    "\046\u010f\001\001\000\002\001\001\000\034\002\045\003" +
    "\054\005\075\006\070\011\046\012\067\013\057\014\060" +
    "\015\061\016\062\017\100\020\074\022\u0111\001\001\000" +
    "\002\001\001\000\004\046\u0113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\002\045\003\054\005\075\006\070" +
    "\011\046\012\067\013\057\014\060\015\061\016\062\017" +
    "\100\020\074\022\264\036\254\037\252\040\270\041\277" +
    "\042\300\043\u011f\045\276\046\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\002\045\003\054\005\075" +
    "\006\070\011\046\012\067\013\057\014\060\015\061\016" +
    "\062\017\100\020\074\022\264\036\254\037\252\040\270" +
    "\041\277\042\300\043\u011c\045\276\046\256\001\001\000" +
    "\002\001\001\000\054\002\045\003\054\005\075\006\070" +
    "\011\046\012\067\013\057\014\060\015\061\016\062\017" +
    "\100\020\074\022\264\036\254\037\252\040\270\041\277" +
    "\042\300\043\u011e\045\276\046\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\002\045" +
    "\003\054\005\075\006\070\011\046\012\067\013\057\014" +
    "\060\015\061\016\062\017\100\020\074\022\264\036\254" +
    "\037\252\040\270\041\277\042\300\043\304\045\276\046" +
    "\256\001\001\000\002\001\001\000\006\027\044\032\u0125" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\012\034\043\035\033\046\u0127\047\u0128\001\001\000\002" +
    "\001\001\000\012\007\012\034\043\035\172\046\u0129\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\012" +
    "\034\043\035\172\046\u012c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public static int errors = 0;
    public String errorMSG = "";

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

    public String getErrors(){
        errors = 0;
        return errorMSG;
    }

    public void report_error(String message) {
        errors++;
        System.out.println("Error (Line: " + (s.right+1) + ", Column: "+ (s.left + 1)+ ", Value: "+s.value+"): Syntax Error\n");
        System.out.println("  "+ errors + " ==> "+ message + "\n");
        errorMSG += ("Error (Line: " + (s.right+1) + ", Column: "+ (s.left + 1)+ ", Value: "+s.value+"): Syntax Error\n");
        errorMSG += ("  "+ errors + " ==> "+ message + "\n\n");
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        getS();
        errorMSG += ("Error (Line: " + (s.right) + ", Column: "+ (s.left)+ ", Value: EOF): Syntax Error\n");
        errorMSG += " ==> Unrecoverable syntax error\n\n";
    }

    public void printS(){
        System.out.println(s.value);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // program ::= program declarations 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("program",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // program ::= declarations 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("program",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // declarations ::= error RBRACES 
            {
              Object RESULT =null;
		 parser.report_error("Out of scope"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarations",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // declarations ::= error SEMICOLON 
            {
              Object RESULT =null;
		 parser.report_error("Out of scope"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarations",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // declarations ::= func_declaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarations",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // declarations ::= declaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarations",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // func_declaration ::= error compound_statement 
            {
              Object RESULT =null;
		 parser.report_error("Defining function/main error"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("func_declaration",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // func_declaration ::= declarator compound_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("func_declaration",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // func_declaration ::= declarator declaration_list compound_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("func_declaration",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // func_declaration ::= void_specifier declarator compound_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("func_declaration",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // func_declaration ::= declaration_specifiers declarator compound_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("func_declaration",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // func_declaration ::= void_specifier declarator declaration_list compound_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("func_declaration",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // func_declaration ::= declaration_specifiers declarator declaration_list compound_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("func_declaration",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // void_specifier ::= VOID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberType(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("void_specifier",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // declaration_list ::= declaration_list declaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration_list",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // declaration_list ::= declaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration_list",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // compound_statement ::= error RBRACES 
            {
              Object RESULT =null;
		 parser.report_error("Statement"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("compound_statement",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // compound_statement ::= LBRACES declaration_list statement_list RBRACES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("compound_statement",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // compound_statement ::= LBRACES declaration_list RBRACES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("compound_statement",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // compound_statement ::= LBRACES statement_list RBRACES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("compound_statement",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // compound_statement ::= LBRACES RBRACES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("compound_statement",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("statement_list",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // statement_list ::= statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("statement_list",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // statement ::= instruction_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // statement ::= jump_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // statement ::= iteration_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // statement ::= selection_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // statement ::= expression_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // statement ::= compound_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // statement ::= labeled_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // instruction_statement ::= WRITE LPAR expression RPAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instruction_statement",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // instruction_statement ::= READ LPAR ID RPAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instruction_statement",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // instruction_statement ::= READ LPAR RPAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instruction_statement",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // labeled_statement ::= DEFAULT error statement 
            {
              Object RESULT =null;
		 parser.report_error("'default' error"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("labeled_statement",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // labeled_statement ::= DEFAULT COLON statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("labeled_statement",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // labeled_statement ::= CASE error statement 
            {
              Object RESULT =null;
		 parser.report_error("'case' error"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("labeled_statement",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // labeled_statement ::= CASE CHARLITERAL COLON statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("labeled_statement",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // labeled_statement ::= CASE NUMBERLITERAL COLON statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("labeled_statement",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression_statement ::= error SEMICOLON 
            {
              Object RESULT =null;
		 parser.report_error("Expression error"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression_statement",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression_statement ::= expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression_statement",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression_statement ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression_statement",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // selection_statement ::= SWITCH error compound_statement 
            {
              Object RESULT =null;
		 parser.report_error("'switch' error"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("selection_statement",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // selection_statement ::= SWITCH LPAR ID RPAR statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("selection_statement",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // selection_statement ::= SWITCH LPAR CHARLITERAL RPAR compound_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("selection_statement",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // selection_statement ::= SWITCH LPAR NUMBERLITERAL RPAR compound_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("selection_statement",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // selection_statement ::= IF error compound_statement 
            {
              Object RESULT =null;
		 parser.report_error("'if' error"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("selection_statement",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // selection_statement ::= IF NT$12 LPAR expression RPAR NT$13 else_stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("selection_statement",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
 Semantic.testIf(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$13",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$12 ::= 
            {
              Object RESULT =null;
 Semantic.startIf(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$12",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // else_stmt ::= compound_statement ELSE NT$11 statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 Semantic.endIf(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("else_stmt",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$11 ::= 
            {
              Object RESULT =null;
 Semantic.startElse(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$11",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // else_stmt ::= compound_statement 
            {
              Object RESULT =null;
		 Semantic.startElse(); Semantic.endIf(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("else_stmt",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // iteration_statement ::= FOR error compound_statement 
            {
              Object RESULT =null;
		 parser.report_error("'for' error"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("iteration_statement",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // iteration_statement ::= FOR LPAR declaration expression_statement expression RPAR compound_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("iteration_statement",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // iteration_statement ::= FOR LPAR expression_statement expression_statement expression RPAR compound_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("iteration_statement",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // iteration_statement ::= FOR LPAR expression_statement expression_statement RPAR compound_statement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("iteration_statement",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // iteration_statement ::= DO error SEMICOLON 
            {
              Object RESULT =null;
		 parser.report_error("'do' error"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("iteration_statement",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // iteration_statement ::= DO compound_statement WHILE LPAR expression RPAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("iteration_statement",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // iteration_statement ::= WHILE error compound_statement 
            {
              Object RESULT =null;
		 parser.report_error("'while' error"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("iteration_statement",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // iteration_statement ::= WHILE NT$9 LPAR expression RPAR NT$10 compound_statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 Semantic.endWhile(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("iteration_statement",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)).value;
 Semantic.testWhile(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$10",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$9 ::= 
            {
              Object RESULT =null;
 Semantic.startWhile(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$9",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // jump_statement ::= RETURN error SEMICOLON 
            {
              Object RESULT =null;
		 parser.report_error("Return error"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("jump_statement",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // jump_statement ::= BREAK error SEMICOLON 
            {
              Object RESULT =null;
		 parser.report_error("Expected ';' after break"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("jump_statement",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // jump_statement ::= CONTINUE error SEMICOLON 
            {
              Object RESULT =null;
		 parser.report_error("Expected ';' after continue"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("jump_statement",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // jump_statement ::= RETURN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("jump_statement",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // jump_statement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("jump_statement",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // jump_statement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.registerBreak(iright, ileft); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("jump_statement",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // jump_statement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.registerContinue(iright, ileft); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("jump_statement",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaration ::= declaration_specifiers error SEMICOLON 
            {
              Object RESULT =null;
		 parser.report_error("Declaration error"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declaration ::= declaration_specifiers init_declarator_list SEMICOLON 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.declInsertTS(i.toString(), iright, ileft); Semantic.printST(); Semantic.printErrors(); Semantic.printSemanticStack(); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaration ::= declaration_specifiers SEMICOLON 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declaration_specifiers ::= CONST 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaration_specifiers ::= CONST type_specifier 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaration_specifiers ::= type_specifier CONST 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declaration_specifiers ::= type_specifier 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declaration_specifiers",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // init_declarator_list ::= init_declarator_list COMMA init_declarator 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("init_declarator_list",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // init_declarator_list ::= init_declarator 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("init_declarator_list",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // init_declarator ::= declarator EQUAL initializer 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("init_declarator",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // init_declarator ::= declarator 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("init_declarator",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // initializer ::= LBRACES initializer_list COMMA RBRACES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("initializer",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // initializer ::= LBRACES initializer_list RBRACES 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("initializer",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // initializer ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("initializer",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // initializer_list ::= initializer_list COMMA initializer 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("initializer_list",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // initializer_list ::= initializer 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("initializer_list",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declarator ::= declarator LPAR error RPAR 
            {
              Object RESULT =null;
		 parser.report_error("Parameter/identifier error"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarator",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declarator ::= declarator LPAR RPAR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Semantic.declFunction("", iright, ileft); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarator",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declarator ::= declarator LPAR identifier_list RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarator",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declarator ::= declarator LPAR parameter_list RPAR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		 Semantic.declFunction("", iright, ileft); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarator",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declarator ::= declarator LBRACKET RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarator",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declarator ::= declarator LBRACKET logical_or_expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarator",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declarator ::= LPAR declarator RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarator",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declarator ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberID(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarator",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // identifier_list ::= identifier_list COMMA ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("identifier_list",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // identifier_list ::= ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("identifier_list",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parameter_list ::= parameter_list COMMA parameter_declaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parameter_list",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parameter_list ::= parameter_declaration 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parameter_list",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parameter_declaration ::= declaration_specifiers 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parameter_declaration",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parameter_declaration ::= declaration_specifiers direct_abstract_declarator 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parameter_declaration",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parameter_declaration ::= declaration_specifiers declarator 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parameter_declaration",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // direct_abstract_declarator ::= direct_abstract_declarator LPAR parameter_list RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // direct_abstract_declarator ::= direct_abstract_declarator LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // direct_abstract_declarator ::= LPAR parameter_list RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // direct_abstract_declarator ::= LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // direct_abstract_declarator ::= direct_abstract_declarator LBRACKET logical_or_expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // direct_abstract_declarator ::= direct_abstract_declarator LBRACKET RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // direct_abstract_declarator ::= LBRACKET logical_or_expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // direct_abstract_declarator ::= LBRACKET RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // direct_abstract_declarator ::= LPAR direct_abstract_declarator RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= expression COMMA assignment_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment_operator ::= OPASSIGNMENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberOP(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment_operator",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assignment_operator ::= EQUAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberOP(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment_operator",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // assignment_expression ::= unary_expression assignment_operator assignment_expression 
            {
              Object RESULT =null;
		 Semantic.evalBinary("", -1, -1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment_expression",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assignment_expression ::= logical_or_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("assignment_expression",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // logical_or_expression ::= logical_or_expression OR NT$8 logical_and_expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Semantic.evalLogical("", -1, -1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("logical_or_expression",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$8 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
 Semantic.rememberOP(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // logical_or_expression ::= logical_and_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("logical_or_expression",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // logical_and_expression ::= logical_and_expression AND NT$7 equality_expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Semantic.evalLogical("", -1, -1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("logical_and_expression",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$7 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
 Semantic.rememberOP(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logical_and_expression ::= equality_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("logical_and_expression",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // equality_expression ::= equality_expression OPEQUALITY NT$6 relational_expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Semantic.evalLogical("", -1, -1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("equality_expression",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$6 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
 Semantic.rememberOP(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // equality_expression ::= relational_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("equality_expression",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // relational_expression ::= relational_expression OPRELATIONAL NT$5 additive_expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Semantic.evalLogical("", -1, -1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("relational_expression",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$5 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
 Semantic.rememberOP(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relational_expression ::= additive_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("relational_expression",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // additive_expression ::= additive_expression MINUS NT$4 multiplicative_expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Semantic.evalBinary("", -1, -1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("additive_expression",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$4 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
 Semantic.rememberOP(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // additive_expression ::= additive_expression SUM NT$3 multiplicative_expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Semantic.evalBinary("", -1, -1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("additive_expression",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
 Semantic.rememberOP(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // additive_expression ::= multiplicative_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("additive_expression",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // multiplicative_expression ::= multiplicative_expression MOD cast_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // multiplicative_expression ::= multiplicative_expression DIV NT$2 cast_expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Semantic.evalBinary("", -1, -1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$2 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
 Semantic.rememberOP(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // multiplicative_expression ::= multiplicative_expression MULT NT$1 cast_expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Semantic.evalBinary("", -1, -1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
 Semantic.rememberOP(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // multiplicative_expression ::= cast_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cast_expression ::= LPAR specifier_qualifier_list RPAR cast_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cast_expression",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cast_expression ::= unary_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cast_expression",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // specifier_qualifier_list ::= CONST 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // specifier_qualifier_list ::= CONST specifier_qualifier_list 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // specifier_qualifier_list ::= type_specifier 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // specifier_qualifier_list ::= type_specifier specifier_qualifier_list 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("specifier_qualifier_list",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_specifier ::= LONG 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberType(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("type_specifier",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_specifier ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberType(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("type_specifier",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_specifier ::= SHORT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberType(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("type_specifier",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_specifier ::= CHAR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberType(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("type_specifier",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unary_operator ::= NOT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("unary_operator",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unary_operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("unary_operator",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unary_operator ::= SUM 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("unary_operator",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unary_operator ::= MULT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("unary_operator",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unary_expression ::= unary_operator cast_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("unary_expression",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unary_expression ::= OPINCDEC NT$0 unary_expression 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;
		 Semantic.evalUnary(-1, -1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("unary_expression",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
 Semantic.rememberOP(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // unary_expression ::= postfix_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("unary_expression",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // argument_expression_list ::= argument_expression_list COMMA assignment_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("argument_expression_list",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // argument_expression_list ::= assignment_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("argument_expression_list",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // postfix_expression ::= postfix_expression OPINCDEC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberOP(i.toString()); Semantic.evalUnary(iright, ileft); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // postfix_expression ::= postfix_expression DOT ID 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // postfix_expression ::= postfix_expression LPAR argument_expression_list RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // postfix_expression ::= postfix_expression LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // postfix_expression ::= postfix_expression LBRACKET expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // postfix_expression ::= primary_expression 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("postfix_expression",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // primary_expression ::= LPAR expression RPAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("primary_expression",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // primary_expression ::= STRING 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberConst(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("primary_expression",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // primary_expression ::= CHARLITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberConst(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("primary_expression",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // primary_expression ::= NUMBERLITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberConst(i.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("primary_expression",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // primary_expression ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.peek()).value;
		 Semantic.rememberVar(i.toString(), iright, ileft); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("primary_expression",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

