/* The following code was generated by JFlex 1.4.3 on 10/30/22, 7:27 PM */

package lexer;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/30/22, 7:27 PM from the specification file
 * <tt>./src/lexer/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2,  0,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 52,  8,  0,  0, 43, 51, 17, 44, 45,  5, 42, 38, 16, 14,  4, 
    10, 11, 11, 11, 11, 11, 11, 11,  7,  7, 40, 39, 53, 41, 53,  0, 
     0, 13, 13, 13, 13, 15, 13,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6, 12,  6,  6, 46,  9, 47,  0,  6, 
     0, 23, 21, 25, 31, 22, 32, 34, 27, 29,  6, 24, 33, 37, 18, 28, 
     6,  6, 19, 26, 20, 30, 36, 35, 12,  6,  6, 48, 50, 49,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\6\1\7\1\10\1\1\14\5\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\2\1\1\25\1\26\1\27\1\0\1\30\2\0"+
    "\1\31\2\0\1\6\1\0\1\6\1\32\2\0\11\5"+
    "\1\33\1\5\1\34\6\5\1\35\1\36\1\37\1\26"+
    "\1\27\2\0\1\6\1\0\2\40\11\5\1\41\1\5"+
    "\1\42\5\5\1\27\1\0\1\2\1\6\1\0\1\5"+
    "\1\43\1\5\1\44\1\45\1\46\5\5\1\47\2\5"+
    "\1\50\1\51\1\5\1\52\1\5\1\53\1\54\2\5"+
    "\1\55\1\56\1\57\1\5\1\60\2\5\1\61\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\242\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\66\0\66\0\66\0\u0510\0\u0546\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\u057c\0\u05b2\0\u0510"+
    "\0\u05e8\0\u061e\0\u0654\0\66\0\u01e6\0\u017a\0\66\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\66\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u010e\0\u09ea\0\u010e\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\66\0\66\0\66\0\66\0\u0b64\0\u0b9a\0\u0bd0"+
    "\0\u072c\0\u0c06\0\66\0\u0798\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde"+
    "\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u010e\0\u0e22\0\u010e"+
    "\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0b9a"+
    "\0\u0fd2\0\u0fd2\0\u1008\0\u010e\0\u103e\0\u010e\0\u010e\0\u010e"+
    "\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u010e\0\u1182\0\u11b8"+
    "\0\u010e\0\u010e\0\u11ee\0\u010e\0\u1224\0\u010e\0\u010e\0\u125a"+
    "\0\u1290\0\u010e\0\u010e\0\u010e\0\u12c6\0\u010e\0\u12fc\0\u1332"+
    "\0\u010e\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\10\2\7\1\13\1\7\1\14\1\15"+
    "\1\7\1\16\1\7\1\17\1\20\2\7\1\21\1\22"+
    "\2\7\1\23\1\7\1\24\1\25\1\26\1\7\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\70\0\1\4\67\0\1\52\1\53\43\0"+
    "\1\54\65\0\1\54\22\0\2\7\2\0\4\7\1\0"+
    "\1\7\2\0\24\7\27\0\1\10\2\0\2\10\2\0"+
    "\1\55\47\0\10\56\1\57\1\60\54\56\7\0\1\61"+
    "\2\0\2\62\1\63\1\0\1\55\56\0\1\64\2\0"+
    "\2\64\72\0\1\65\30\0\1\54\14\0\2\66\1\0"+
    "\6\66\1\67\54\66\6\0\2\7\2\0\4\7\1\0"+
    "\1\7\2\0\4\7\1\70\17\7\26\0\2\7\2\0"+
    "\4\7\1\0\1\7\2\0\1\7\1\71\22\7\26\0"+
    "\2\7\2\0\4\7\1\0\1\7\2\0\17\7\1\72"+
    "\4\7\26\0\2\7\2\0\4\7\1\0\1\7\2\0"+
    "\5\7\1\73\3\7\1\74\1\75\11\7\26\0\2\7"+
    "\2\0\4\7\1\0\1\7\2\0\11\7\1\76\7\7"+
    "\1\77\2\7\26\0\2\7\2\0\4\7\1\0\1\7"+
    "\2\0\1\100\15\7\1\101\5\7\26\0\2\7\2\0"+
    "\4\7\1\0\1\7\2\0\4\7\1\102\5\7\1\103"+
    "\11\7\26\0\2\7\2\0\4\7\1\0\1\7\2\0"+
    "\12\7\1\104\11\7\26\0\2\7\2\0\4\7\1\0"+
    "\1\7\2\0\12\7\1\105\11\7\26\0\2\7\2\0"+
    "\4\7\1\0\1\7\2\0\1\7\1\106\7\7\1\107"+
    "\12\7\26\0\2\7\2\0\4\7\1\0\1\7\2\0"+
    "\12\7\1\110\11\7\26\0\2\7\2\0\4\7\1\0"+
    "\1\7\2\0\5\7\1\111\16\7\71\0\1\112\65\0"+
    "\1\54\1\65\75\0\1\113\66\0\1\114\53\0\1\115"+
    "\14\0\1\52\1\116\1\4\63\52\5\117\1\120\60\117"+
    "\2\56\1\0\63\56\7\0\1\61\2\0\2\61\2\0"+
    "\1\55\56\0\1\61\2\0\2\62\2\0\1\55\56\0"+
    "\1\121\2\0\2\121\1\0\1\121\1\0\1\121\5\0"+
    "\3\121\1\0\1\121\5\0\2\121\34\0\1\64\2\0"+
    "\2\64\3\0\1\122\6\0\1\122\60\0\1\123\55\0"+
    "\1\66\7\0\1\124\3\66\47\0\2\7\2\0\4\7"+
    "\1\0\1\7\2\0\2\7\1\125\2\7\1\126\16\7"+
    "\26\0\2\7\2\0\4\7\1\0\1\7\2\0\4\7"+
    "\1\127\17\7\26\0\2\7\2\0\4\7\1\0\1\7"+
    "\2\0\10\7\1\130\13\7\26\0\2\7\2\0\4\7"+
    "\1\0\1\7\2\0\10\7\1\131\13\7\26\0\2\7"+
    "\2\0\4\7\1\0\1\7\2\0\5\7\1\132\16\7"+
    "\26\0\2\7\2\0\4\7\1\0\1\7\2\0\1\133"+
    "\23\7\26\0\2\7\2\0\4\7\1\0\1\7\2\0"+
    "\12\7\1\134\11\7\26\0\2\7\2\0\4\7\1\0"+
    "\1\7\2\0\13\7\1\135\10\7\26\0\2\7\2\0"+
    "\4\7\1\0\1\7\2\0\2\7\1\136\21\7\26\0"+
    "\2\7\2\0\4\7\1\0\1\7\2\0\16\7\1\137"+
    "\5\7\26\0\2\7\2\0\4\7\1\0\1\7\2\0"+
    "\1\7\1\140\22\7\26\0\2\7\2\0\4\7\1\0"+
    "\1\7\2\0\1\141\23\7\26\0\2\7\2\0\4\7"+
    "\1\0\1\7\2\0\13\7\1\142\10\7\26\0\2\7"+
    "\2\0\4\7\1\0\1\7\2\0\13\7\1\143\10\7"+
    "\26\0\2\7\2\0\4\7\1\0\1\7\2\0\13\7"+
    "\1\144\10\7\26\0\2\7\2\0\4\7\1\0\1\7"+
    "\2\0\13\7\1\145\10\7\20\0\2\146\1\4\63\146"+
    "\5\117\1\147\64\117\1\150\1\147\60\117\7\0\1\151"+
    "\2\0\2\151\4\0\1\152\53\0\2\7\2\0\4\7"+
    "\1\0\1\7\2\0\14\7\1\153\7\7\26\0\2\7"+
    "\2\0\4\7\1\0\1\7\2\0\15\7\1\154\6\7"+
    "\26\0\2\7\2\0\4\7\1\0\1\7\2\0\5\7"+
    "\1\155\16\7\26\0\2\7\2\0\4\7\1\0\1\7"+
    "\2\0\4\7\1\156\17\7\26\0\2\7\2\0\4\7"+
    "\1\0\1\7\2\0\4\7\1\157\17\7\26\0\2\7"+
    "\2\0\4\7\1\0\1\7\2\0\1\7\1\160\22\7"+
    "\26\0\2\7\2\0\4\7\1\0\1\7\2\0\2\7"+
    "\1\161\5\7\1\162\13\7\26\0\2\7\2\0\4\7"+
    "\1\0\1\7\2\0\1\7\1\163\22\7\26\0\2\7"+
    "\2\0\4\7\1\0\1\7\2\0\2\7\1\164\21\7"+
    "\26\0\2\7\2\0\4\7\1\0\1\7\2\0\5\7"+
    "\1\165\16\7\26\0\2\7\2\0\4\7\1\0\1\7"+
    "\2\0\20\7\1\166\3\7\26\0\2\7\2\0\4\7"+
    "\1\0\1\7\2\0\2\7\1\167\21\7\26\0\2\7"+
    "\2\0\4\7\1\0\1\7\2\0\17\7\1\170\4\7"+
    "\26\0\2\7\2\0\4\7\1\0\1\7\2\0\15\7"+
    "\1\171\6\7\26\0\2\7\2\0\4\7\1\0\1\7"+
    "\2\0\1\172\23\7\20\0\2\146\1\0\63\146\4\117"+
    "\1\4\1\147\60\117\7\0\1\151\2\0\2\151\60\0"+
    "\2\7\2\0\4\7\1\0\1\7\2\0\1\7\1\173"+
    "\22\7\26\0\2\7\2\0\4\7\1\0\1\7\2\0"+
    "\6\7\1\174\15\7\26\0\2\7\2\0\4\7\1\0"+
    "\1\7\2\0\13\7\1\175\10\7\26\0\2\7\2\0"+
    "\4\7\1\0\1\7\2\0\2\7\1\176\21\7\26\0"+
    "\2\7\2\0\4\7\1\0\1\7\2\0\2\7\1\177"+
    "\21\7\26\0\2\7\2\0\4\7\1\0\1\7\2\0"+
    "\7\7\1\200\14\7\26\0\2\7\2\0\4\7\1\0"+
    "\1\7\2\0\14\7\1\201\7\7\26\0\2\7\2\0"+
    "\4\7\1\0\1\7\2\0\4\7\1\202\17\7\26\0"+
    "\2\7\2\0\4\7\1\0\1\7\2\0\4\7\1\203"+
    "\17\7\26\0\2\7\2\0\4\7\1\0\1\7\2\0"+
    "\1\204\23\7\26\0\2\7\2\0\4\7\1\0\1\7"+
    "\2\0\1\205\23\7\26\0\2\7\2\0\4\7\1\0"+
    "\1\7\2\0\11\7\1\206\12\7\26\0\2\7\2\0"+
    "\4\7\1\0\1\7\2\0\17\7\1\207\4\7\26\0"+
    "\2\7\2\0\4\7\1\0\1\7\2\0\14\7\1\210"+
    "\7\7\26\0\2\7\2\0\4\7\1\0\1\7\2\0"+
    "\2\7\1\211\21\7\26\0\2\7\2\0\4\7\1\0"+
    "\1\7\2\0\4\7\1\212\17\7\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4968];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\25\1\3\11\2\1\7\11"+
    "\5\1\1\0\1\11\2\0\1\11\2\0\1\1\1\0"+
    "\1\1\1\11\2\0\22\1\4\11\1\1\2\0\1\1"+
    "\1\0\1\11\23\1\1\0\2\1\1\0\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private Symbol symbol(int type, Object value){
    return new Symbol(type, yyline, yycolumn, value);
  }

  private Symbol symbol(int type){
    return new Symbol(type, yyline, yycolumn);
  }

  
  
  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 51: break;
        case 27: 
          { return new Symbol(sym.IF, yychar, yyline, yytext());
          }
        case 52: break;
        case 14: 
          { return new Symbol(sym.MOD, yychar, yyline, yytext());
          }
        case 53: break;
        case 12: 
          { return new Symbol(sym.EQUAL, yychar, yyline, yytext());
          }
        case 54: break;
        case 42: 
          { return new Symbol(sym.BREAK, yychar, yyline, yytext());
          }
        case 55: break;
        case 31: 
          { return new Symbol(sym.AND, yychar, yyline, yytext());
          }
        case 56: break;
        case 3: 
          { return new Symbol(sym.DIV, yychar, yyline, yytext());
          }
        case 57: break;
        case 9: 
          { return new Symbol(sym.COMMA, yychar, yyline, yytext());
          }
        case 58: break;
        case 16: 
          { return new Symbol(sym.RPAR, yychar, yyline, yytext());
          }
        case 59: break;
        case 44: 
          { return new Symbol(sym.SHORT, yychar, yyline, yytext());
          }
        case 60: break;
        case 1: 
          { throw new Error("Illegal character <"+yytext()+">");
          }
        case 61: break;
        case 37: 
          { return new Symbol(sym.CASE, yychar, yyline, yytext());
          }
        case 62: break;
        case 47: 
          { return new Symbol(sym.RETURN, yychar, yyline, yytext());
          }
        case 63: break;
        case 43: 
          { return new Symbol(sym.CONST, yychar, yyline, yytext());
          }
        case 64: break;
        case 41: 
          { return new Symbol(sym.MAIN, yychar, yyline, yytext());
          }
        case 65: break;
        case 19: 
          { return new Symbol(sym.LBRACES, yychar, yyline, yytext());
          }
        case 66: break;
        case 30: 
          { return new Symbol(sym.OR, yychar, yyline, yytext());
          }
        case 67: break;
        case 10: 
          { return new Symbol(sym.SEMICOLON, yychar, yyline, yytext());
          }
        case 68: break;
        case 39: 
          { return new Symbol(sym.LONG, yychar, yyline, yytext());
          }
        case 69: break;
        case 25: 
          { return symbol(sym.STRING, new String(yytext()));
          }
        case 70: break;
        case 32: 
          { return new Symbol(sym.CHARLITERAL, yychar, yyline, yytext());
          }
        case 71: break;
        case 49: 
          { return new Symbol(sym.DEFAULT, yychar, yyline, yytext());
          }
        case 72: break;
        case 20: 
          { return new Symbol(sym.RBRACES, yychar, yyline, yytext());
          }
        case 73: break;
        case 15: 
          { return new Symbol(sym.LPAR, yychar, yyline, yytext());
          }
        case 74: break;
        case 8: 
          { return new Symbol(sym.MINUS, yychar, yyline, yytext());
          }
        case 75: break;
        case 50: 
          { return new Symbol(sym.CONTINUE, yychar, yyline, yytext());
          }
        case 76: break;
        case 11: 
          { return new Symbol(sym.COLON, yychar, yyline, yytext());
          }
        case 77: break;
        case 45: 
          { return new Symbol(sym.WRITE, yychar, yyline, yytext());
          }
        case 78: break;
        case 33: 
          { return new Symbol(sym.INT, yychar, yyline, yytext());
          }
        case 79: break;
        case 26: 
          { return new Symbol(sym.OPINCDEC, yychar, yyline, yytext());
          }
        case 80: break;
        case 29: 
          { return new Symbol(sym.OPEQUALITY, yychar, yyline, yytext());
          }
        case 81: break;
        case 5: 
          { return new Symbol(sym.ID, yychar, yyline, yytext());
          }
        case 82: break;
        case 18: 
          { return new Symbol(sym.RBRACKET, yychar, yyline, yytext());
          }
        case 83: break;
        case 40: 
          { return new Symbol(sym.VOID, yychar, yyline, yytext());
          }
        case 84: break;
        case 17: 
          { return new Symbol(sym.LBRACKET, yychar, yyline, yytext());
          }
        case 85: break;
        case 28: 
          { return new Symbol(sym.DO, yychar, yyline, yytext());
          }
        case 86: break;
        case 4: 
          { return new Symbol(sym.MULT, yychar, yyline, yytext());
          }
        case 87: break;
        case 35: 
          { return new Symbol(sym.READ, yychar, yyline, yytext());
          }
        case 88: break;
        case 36: 
          { return new Symbol(sym.ELSE, yychar, yyline, yytext());
          }
        case 89: break;
        case 48: 
          { return new Symbol(sym.SWITCH, yychar, yyline, yytext());
          }
        case 90: break;
        case 34: 
          { return new Symbol(sym.FOR, yychar, yyline, yytext());
          }
        case 91: break;
        case 13: 
          { return new Symbol(sym.SUM, yychar, yyline, yytext());
          }
        case 92: break;
        case 46: 
          { return new Symbol(sym.WHILE, yychar, yyline, yytext());
          }
        case 93: break;
        case 38: 
          { return new Symbol(sym.CHAR, yychar, yyline, yytext());
          }
        case 94: break;
        case 21: 
          { return new Symbol(sym.NOT, yychar, yyline, yytext());
          }
        case 95: break;
        case 24: 
          { return new Symbol(sym.OPASSIGNMENT, yychar, yyline, yytext());
          }
        case 96: break;
        case 23: 
          { /*Ignore*/
          }
        case 97: break;
        case 22: 
          { return new Symbol(sym.OPRELATIONAL, yychar, yyline, yytext());
          }
        case 98: break;
        case 6: 
          { return new Symbol(sym.NUMBERLITERAL, yychar, yyline, yytext());
          }
        case 99: break;
        case 7: 
          { return new Symbol(sym.DOT, yychar, yyline, yytext());
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
