package lexer;

import java_cup.runtime.Symbol;
import lexer.Semantic;

parser code
{:
    private Symbol s;
    public static int errors = 0;
    public String errorMSG = "";
    public String scope = "Global";

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

    public String getScope(){
        return scope;
    }

    public void setGlobal(){
        this.scope = "Global";
    }

    public void setLocal(){
        this.scope = "Local";
    }

    public String getErrors(){
        errors = 0;
        return errorMSG;
    }

    public void report_error(String message) {
        errors++;
        System.out.println("Error (Line: " + (s.right+1) + ", Column: "+ (s.left + 1)+ ", Value: "+s.value+"): Syntax Error\n");
        System.out.println("  "+ errors + " ==> "+ message + "\n");
        errorMSG += ("Error (Line: " + (s.right+1) + ", Column: "+ (s.left + 1)+ ", Value: "+s.value+"): Syntax Error\n");
        errorMSG += ("  "+ errors + " ==> "+ message + "\n\n");
    }
    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        getS();
        errorMSG += ("Error (Line: " + (s.right) + ", Column: "+ (s.left)+ ", Value: EOF): Syntax Error\n");
        errorMSG += " ==> Unrecoverable syntax error\n\n";
    }

    public void printS(){
        System.out.println(s.value);
    }
:};

terminal DOT, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, ELSE, FOR, IF,
    INT, LONG, RETURN, SHORT, SWITCH, VOID, WHILE, READ, WRITE,
    ID, NUMBERLITERAL, CHARLITERAL, STRING, COMMA, SEMICOLON, COLON,
    EQUAL, SUM, MINUS, MULT, DIV, MOD, RPAR, LPAR, RBRACKET, LBRACKET,
    RBRACES, LBRACES, OR, AND, NOT, OPRELATIONAL, OPEQUALITY, OPASSIGNMENT, OPINCDEC
;

non terminal primary_expression, postfix_expression, argument_expression_list, 
    unary_expression, unary_operator, type_specifier, specifier_qualifier_list, 
    cast_expression, multiplicative_expression, additive_expression, relational_expression, 
    equality_expression, logical_and_expression, logical_or_expression, assignment_expression, 
    assignment_operator, expression, direct_abstract_declarator, parameter_declaration, 
    parameter_list, identifier_list, declarator, initializer_list, initializer, init_declarator, 
    init_declarator_list, declaration_specifiers, declaration,  jump_statement, iteration_statement,
    selection_statement, expression_statement, labeled_statement, statement, statement_list, instruction_statement,
    compound_statement, declaration_list, void_specifier, func_declaration, declarations, program, else_stmt
;

start with program;

/*  EXPRESSIONS */

primary_expression
	::= ID:i {: Semantic.rememberVar(i.toString(), iright, ileft); :}
	| NUMBERLITERAL:i {: Semantic.rememberConst(i.toString()); :}
        | CHARLITERAL:i {: Semantic.rememberConst(i.toString()); :}
	| STRING:i {: Semantic.rememberConst(i.toString()); :}
	| LPAR expression RPAR
	;

postfix_expression
	::= primary_expression
	| postfix_expression LBRACKET expression RBRACKET
	| postfix_expression LPAR RPAR
	| postfix_expression LPAR argument_expression_list RPAR
	| postfix_expression DOT ID
	| postfix_expression OPINCDEC:i {: Semantic.rememberOP(i.toString()); Semantic.evalUnary(iright, ileft); :} // #evalUnary
	;

argument_expression_list
	::= assignment_expression
	| argument_expression_list COMMA assignment_expression
	;

unary_expression
	::= postfix_expression
	| OPINCDEC:i {: Semantic.rememberOP(i.toString()); :} unary_expression {: Semantic.evalUnary(-1, -1); :} // #evalUnary
	| unary_operator cast_expression 
	;

unary_operator
	::= MULT
	| SUM
	| MINUS
	| NOT
	;

type_specifier
        ::= CHAR:i {: Semantic.rememberType(i.toString()); :}
        | SHORT:i {: Semantic.rememberType(i.toString()); :}
        | INT:i {: Semantic.rememberType(i.toString()); :}
        | LONG:i {: Semantic.rememberType(i.toString()); :}
        ;

specifier_qualifier_list
	::= type_specifier specifier_qualifier_list
	| type_specifier
	| CONST specifier_qualifier_list
	| CONST
	;

cast_expression
	::= unary_expression
	| LPAR specifier_qualifier_list RPAR cast_expression 
	;

multiplicative_expression
	::= cast_expression
	| multiplicative_expression MULT:i {: Semantic.rememberOP(i.toString()); :} cast_expression {: Semantic.evalBinary("", -1, -1); :} // #evalBinary
	| multiplicative_expression DIV:i {: Semantic.rememberOP(i.toString()); :} cast_expression {: Semantic.evalBinary("", -1, -1); :} // #evalBinary
	| multiplicative_expression MOD cast_expression
	;

additive_expression
	::= multiplicative_expression
	| additive_expression SUM:i {: Semantic.rememberOP(i.toString()); :} multiplicative_expression {: Semantic.evalBinary("", -1, -1); :} // #evalBinary
	| additive_expression MINUS:i {: Semantic.rememberOP(i.toString()); :} multiplicative_expression {: Semantic.evalBinary("", -1, -1); :} // #evalBinary
	;

relational_expression
	::= additive_expression
	| relational_expression OPRELATIONAL:i {: Semantic.rememberOP(i.toString()); :} additive_expression {: Semantic.evalLogical("", -1, -1); :} // #evalLogical
	;

equality_expression
	::= relational_expression
	| equality_expression OPEQUALITY:i {: Semantic.rememberOP(i.toString()); :} relational_expression {: Semantic.evalLogical("", -1, -1); :} // #evalLogical 1==2-1 
	;

logical_and_expression
	::= equality_expression
	| logical_and_expression AND:i {: Semantic.rememberOP(i.toString()); :} equality_expression {: Semantic.evalLogical("", -1, -1); :} // #evalLogical
	;

logical_or_expression
	::= logical_and_expression
	| logical_or_expression OR:i {: Semantic.rememberOP(i.toString()); :} logical_and_expression {: Semantic.evalLogical("", -1, -1); :} // #evalLogical
	;

assignment_expression
	::= logical_or_expression
	| unary_expression assignment_operator assignment_expression {: Semantic.evalBinary("", -1, -1); :} // #evalBinary
	;

assignment_operator
	::= EQUAL:i {: Semantic.rememberOP(i.toString()); :}
	| OPASSIGNMENT:i {: Semantic.rememberOP(i.toString()); :}
	;

expression
	::= assignment_expression
	| expression COMMA assignment_expression
	;

/*  VAR DECLARATIONS    */

direct_abstract_declarator
	::= LPAR direct_abstract_declarator RPAR
	| LBRACKET RBRACKET
	| LBRACKET logical_or_expression RBRACKET
	| direct_abstract_declarator LBRACKET RBRACKET
	| direct_abstract_declarator LBRACKET logical_or_expression RBRACKET
	| LPAR RPAR
	| LPAR parameter_list RPAR
	| direct_abstract_declarator LPAR RPAR
	| direct_abstract_declarator LPAR parameter_list RPAR
	;

parameter_declaration
	::= declaration_specifiers declarator
	| declaration_specifiers direct_abstract_declarator
	| declaration_specifiers
	;

parameter_list
	::= parameter_declaration
	| parameter_list COMMA parameter_declaration
	;

identifier_list
	::= ID
	| identifier_list COMMA ID
	;

declarator 
	::= ID:i {: Semantic.rememberID(i.toString()); :}
	| LPAR declarator RPAR
	| declarator LBRACKET logical_or_expression RBRACKET
	| declarator LBRACKET RBRACKET
	| declarator LPAR parameter_list:i RPAR {: Semantic.declFunction("", iright, ileft); :}
	| declarator LPAR identifier_list RPAR
	| declarator:i LPAR RPAR {: Semantic.declFunction("", iright, ileft); :}
        | declarator LPAR error RPAR {: parser.report_error("Parameter/identifier error"); :}
	;

initializer_list
	::= initializer
	| initializer_list COMMA initializer
	;

initializer
	::= assignment_expression
	| LBRACES initializer_list RBRACES
	| LBRACES initializer_list COMMA RBRACES
	;

init_declarator
	::= declarator
	| declarator EQUAL initializer
	;

init_declarator_list
	::= init_declarator
	| init_declarator_list COMMA init_declarator
	;

declaration_specifiers
	::= type_specifier
	| type_specifier CONST
	| CONST type_specifier
	| CONST
	;

declaration
	::= declaration_specifiers SEMICOLON
	| declaration_specifiers init_declarator_list SEMICOLON:i {: Semantic.declInsertTS(i.toString(), iright, ileft, parser.getScope()); Semantic.printST(); Semantic.printErrors(); Semantic.printSemanticStack(); :}
        | declaration_specifiers error SEMICOLON {: parser.report_error("Declaration error"); :}
	;


/*  FUNCTION DECLARATIONS */

jump_statement
	::= CONTINUE SEMICOLON:i {: Semantic.registerContinue(iright, ileft); :}
	| BREAK SEMICOLON:i {: Semantic.registerBreak(iright, ileft); :}
	| RETURN SEMICOLON
	| RETURN expression SEMICOLON
        | CONTINUE error SEMICOLON {: parser.report_error("Expected ';' after continue"); :}
	| BREAK error SEMICOLON {: parser.report_error("Expected ';' after break"); :}
        | RETURN error SEMICOLON {: parser.report_error("Return error"); :}
	;

iteration_statement 
	::= WHILE {: Semantic.startWhile(); :} LPAR expression RPAR {: Semantic.testWhile(); :} compound_statement {: Semantic.endWhile(); :}
        | WHILE error compound_statement {: parser.report_error("'while' error"); :}
	| DO compound_statement WHILE LPAR expression RPAR SEMICOLON    // NO SE OCUPA
        | DO error SEMICOLON {: parser.report_error("'do' error"); :}   // NO SE OCUPA
	| FOR LPAR expression_statement expression_statement RPAR compound_statement
	| FOR LPAR expression_statement expression_statement expression RPAR compound_statement
        | FOR LPAR declaration expression_statement expression RPAR compound_statement // aceptar declaraciones 
        | FOR error compound_statement {: parser.report_error("'for' error"); :}
        ;

else_stmt
        ::= compound_statement {: Semantic.startElse(); Semantic.endIf(); :}
        | compound_statement ELSE {: Semantic.startElse(); :} statement {: Semantic.endIf(); :}
        ;

selection_statement
	::= IF {: Semantic.startIf(); :} LPAR expression RPAR {: Semantic.testIf(); :} else_stmt 
        | IF error compound_statement {: parser.report_error("'if' error"); :}
	| SWITCH LPAR NUMBERLITERAL RPAR compound_statement
        | SWITCH LPAR CHARLITERAL RPAR compound_statement
        | SWITCH LPAR ID RPAR statement // ID[]???? // exp??????
        | SWITCH error compound_statement {: parser.report_error("'switch' error"); :}
	;

expression_statement
	::= SEMICOLON
	| expression SEMICOLON
        | error SEMICOLON {: parser.report_error("Expression error"); :}
	;

labeled_statement
	::= CASE NUMBERLITERAL COLON statement
        | CASE CHARLITERAL COLON statement // expressions???
        | CASE error statement {: parser.report_error("'case' error"); :}
	| DEFAULT COLON statement
        | DEFAULT error statement {: parser.report_error("'default' error"); :}
	;

instruction_statement
        ::= READ LPAR RPAR SEMICOLON
        | READ LPAR ID RPAR SEMICOLON
        | WRITE LPAR expression RPAR SEMICOLON
        ;

statement
	::= labeled_statement /* deberia estar dentro de un switch */
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
        | instruction_statement
	;

statement_list
	::= statement
	| statement_list statement
	;

compound_statement
	::= LBRACES RBRACES
	| LBRACES statement_list RBRACES
	| LBRACES declaration_list RBRACES
	| LBRACES declaration_list statement_list RBRACES
        | error RBRACES {: parser.report_error("Statement"); :}
        ;

declaration_list
	::= {: parser.setLocal(); :} declaration
	| declaration_list declaration 
	;

void_specifier
        ::= VOID:i {: Semantic.rememberType(i.toString()); :}
        ;

func_declaration
	::= declaration_specifiers declarator declaration_list compound_statement
        | void_specifier declarator declaration_list compound_statement 
	| declaration_specifiers declarator compound_statement {: System.out.println("Here"); :}
        | void_specifier declarator compound_statement
	| declarator declaration_list compound_statement
	| declarator compound_statement
        | error compound_statement {: parser.report_error("Defining function/main error"); :}
	;

/*  START */
declarations 
    ::= declaration
    | func_declaration
    | error SEMICOLON {: parser.report_error("Out of scope"); :}
    | error RBRACES {: parser.report_error("Out of scope"); :}
    ;

program 
    ::=  declarations {: parser.setGlobal(); :}
    |  program declarations {: parser.setGlobal(); :}
    ;
