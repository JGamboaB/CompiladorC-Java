package lexer;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};

terminal Break, Case, Char, Const, Continue, Default, Do, Else, For, If,
    Int, Long, Return, Short, Switch, Void, While, Main, Read, Write,
    Identifier, NumberLiteral, CharLiteral, String, Comma, Semicolon,
    Equal, Sum, Minus, Mult, Div, Mod, RPar, LPar, RBracket, LBracket,
    RBraces, LBraces, OpLogic, OpRelational, OpAssignment, OpIncDec, OpBool, ERROR;

non terminal program, declList, decl, varDecl, typeVar, varDeclList,
    varDeclInit, funcDecl, typeFunc, parms, parmList, parmTypeList, parmId

start with program;

program ::= declList;

declList ::= declList decl
    | decl
;

decl ::= varDecl 
    | funcDecl
;


varDecl ::= typeVar varDeclList ;

typeVar ::= Char
    | Int
    |Long
    |Short
;

varDeclList ::= varDeclList Comma varDeclInit
    | varDeclInit
;

varDeclInit ::=Identifier 
    | Identifier LBracket NumberLiteral RBracket
;

/*
varDeclInit ::= varDeclId 
    | varDeclId : simpleExp
;
*/

funcDecl ::= typeFunc  Identifier LPar parms RPar stmt
    | typeFunc  Identifier LPar RPar stmt
;

typeFunc ::= Char
    | Int
    |Long
    |Short
    |Void
;

parms ::= parmList
;

parmList ::= parmList Comma parmTypeList 
    | parmTypeList
;
parmTypeList ::= typeVar parmId;

parmId ::= Identifier   
    | Identifier LBracket RBracket
;











