/* The following code was generated by JFlex 1.4.3 on 9/17/22, 9:11 PM */

package lexer;
import lexer.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/17/22, 9:11 PM from the specification file
 * <tt>./src/lexer/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\54"+
    "\1\46\1\0\1\6\1\54\1\56\1\0\1\47\1\47\1\5\1\50"+
    "\1\47\1\10\1\47\1\4\1\11\11\12\1\47\1\47\1\53\1\51"+
    "\1\52\1\47\1\0\4\14\1\15\1\14\21\6\1\13\2\6\1\47"+
    "\1\57\1\47\1\54\1\6\1\0\1\16\1\22\1\26\1\33\1\24"+
    "\1\34\1\40\1\30\1\32\1\6\1\25\1\35\1\36\1\31\1\21"+
    "\1\44\1\6\1\23\1\27\1\20\1\17\1\45\1\42\1\37\1\43"+
    "\1\41\1\47\1\55\1\47\1\47\41\7\2\0\4\6\4\0\1\6"+
    "\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6"+
    "\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\21\0\160\7\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0"+
    "\213\6\1\0\5\7\2\0\246\6\1\0\46\6\2\0\1\6\6\0"+
    "\51\6\6\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0"+
    "\2\7\1\0\1\7\10\0\33\6\4\0\4\6\15\0\6\7\5\0"+
    "\1\6\4\0\13\7\1\0\1\7\3\0\53\6\37\7\4\0\2\6"+
    "\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0"+
    "\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7"+
    "\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7"+
    "\2\6\4\0\1\6\2\0\1\7\30\6\4\7\1\6\11\7\1\6"+
    "\3\7\1\6\5\7\22\0\31\6\3\7\4\0\13\6\65\0\25\6"+
    "\1\0\22\6\13\0\61\7\66\6\3\7\1\6\22\7\1\6\7\7"+
    "\12\6\2\7\2\0\12\7\1\0\20\6\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\7\0\2\6"+
    "\1\0\1\7\2\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7"+
    "\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6"+
    "\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6"+
    "\17\0\2\6\2\7\2\0\12\7\1\0\1\6\7\0\1\6\6\7"+
    "\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\7\0\3\7\4\0\2\6\1\0\3\6\2\7\2\0"+
    "\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\6\0\5\7"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\20\6\3\0\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\1\0\3\6\5\0\2\6"+
    "\2\7\2\0\12\7\20\0\1\6\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6"+
    "\2\7\2\0\12\7\1\0\2\6\15\0\4\7\11\6\1\0\3\6"+
    "\1\0\51\6\2\7\1\6\7\7\1\0\3\7\1\0\4\7\1\6"+
    "\5\0\3\6\1\7\7\0\3\6\2\7\2\0\12\7\12\0\6\6"+
    "\1\0\3\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\6\0\12\7\2\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0"+
    "\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\1\0\5\6"+
    "\1\0\30\6\1\0\1\6\1\0\12\6\1\7\2\6\11\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6"+
    "\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0"+
    "\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7"+
    "\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6"+
    "\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0"+
    "\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0"+
    "\20\6\20\0\126\6\2\0\6\6\3\0\u026c\6\2\0\21\6\1\0"+
    "\32\6\5\0\113\6\3\0\13\6\7\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\4\7\1\0\12\7\6\0\131\6\7\0\5\6"+
    "\2\7\42\6\1\7\1\6\5\0\106\6\12\0\37\6\1\0\14\7"+
    "\4\0\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0"+
    "\32\6\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0"+
    "\35\7\2\0\13\7\6\0\12\7\15\0\1\6\10\0\16\7\1\0"+
    "\2\7\77\0\5\7\57\6\21\7\7\6\4\0\12\7\21\0\11\7"+
    "\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7\14\0\44\6"+
    "\24\7\10\0\12\7\3\0\3\6\12\7\44\6\2\0\11\6\7\0"+
    "\53\6\2\0\3\6\20\0\3\7\1\0\25\7\4\6\1\7\6\6"+
    "\1\7\2\6\3\7\1\6\5\0\300\6\72\7\1\0\5\7\u0116\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7\32\0\5\7"+
    "\20\0\2\6\23\0\1\6\13\0\5\7\1\0\12\7\1\0\1\6"+
    "\15\0\1\6\20\0\15\6\3\0\40\6\20\0\15\7\4\0\1\7"+
    "\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6"+
    "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6"+
    "\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6"+
    "\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6"+
    "\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6"+
    "\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6"+
    "\1\0\4\6\5\0\53\6\1\0\136\6\21\0\40\6\60\0\20\6"+
    "\u0200\0\u19c0\6\100\0\u51fd\6\3\0\u048d\6\103\0\56\6\2\0\u010d\6"+
    "\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0"+
    "\37\6\2\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\65\6"+
    "\2\0\11\6\52\0\15\6\1\7\3\6\1\7\4\6\1\7\27\6"+
    "\5\7\4\0\1\7\13\0\1\6\7\0\64\6\14\0\2\7\62\6"+
    "\22\7\12\0\12\7\6\0\22\7\6\6\3\0\1\6\1\0\2\6"+
    "\13\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7"+
    "\57\6\16\7\16\0\1\6\12\7\6\0\5\6\1\7\12\6\12\7"+
    "\5\6\1\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0"+
    "\12\7\6\0\27\6\3\0\1\6\3\7\62\6\1\7\1\6\3\7"+
    "\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0"+
    "\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0"+
    "\6\6\11\0\7\6\1\0\7\6\1\0\53\6\1\0\16\6\6\0"+
    "\163\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6"+
    "\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6"+
    "\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6"+
    "\2\0\66\6\50\0\15\6\3\0\20\7\20\0\20\7\3\0\2\6"+
    "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7"+
    "\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6"+
    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\2\2\3\1\4\1\3\2\5\17\4"+
    "\1\6\6\3\1\7\1\1\1\10\1\11\1\5\1\12"+
    "\1\0\1\3\2\4\1\0\2\5\1\0\17\4\2\13"+
    "\5\4\1\3\1\14\1\15\1\16\1\17\2\5\1\12"+
    "\2\0\1\4\4\5\31\4\1\12\1\0\1\2\1\5"+
    "\27\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\140\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\140\0\140\0\u04e0\0\u0510\0\u0540"+
    "\0\u0570\0\u05a0\0\u05d0\0\300\0\300\0\u0600\0\u0630\0\u0660"+
    "\0\u0690\0\300\0\u06c0\0\u06f0\0\140\0\u0720\0\u0750\0\u0780"+
    "\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900"+
    "\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u06c0"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\300"+
    "\0\300\0\300\0\300\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\140\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0"+
    "\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60"+
    "\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\u0c60\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0"+
    "\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530"+
    "\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0"+
    "\0\u16e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\3\11\1\15\1\16\1\17\1\11"+
    "\1\20\1\21\1\22\1\11\1\23\1\24\2\11\1\25"+
    "\1\26\1\27\1\30\2\11\1\31\1\11\1\32\2\11"+
    "\1\33\1\34\1\35\1\36\1\10\1\37\1\40\1\10"+
    "\1\41\1\42\1\3\1\43\2\44\43\43\1\45\10\43"+
    "\1\46\11\0\2\47\47\0\1\5\6\0\2\47\131\0"+
    "\1\50\1\51\3\0\2\47\36\0\1\52\17\0\2\47"+
    "\36\0\1\52\14\0\2\53\1\0\2\54\33\53\12\0"+
    "\2\55\1\0\5\55\1\35\1\56\1\57\36\55\2\35"+
    "\7\55\1\0\6\55\2\57\1\60\23\55\1\60\22\55"+
    "\1\0\6\55\2\57\45\55\6\0\2\53\1\0\2\54"+
    "\4\53\1\61\26\53\20\0\2\53\1\0\2\54\16\53"+
    "\1\62\14\53\20\0\2\53\1\0\2\54\30\53\1\63"+
    "\2\53\20\0\2\53\1\0\2\54\10\53\1\64\22\53"+
    "\20\0\2\53\1\0\2\54\11\53\1\65\21\53\20\0"+
    "\2\53\1\0\2\54\16\53\1\66\3\53\1\67\1\53"+
    "\1\70\6\53\20\0\2\53\1\0\2\54\3\53\1\67"+
    "\2\53\1\71\6\53\1\72\15\53\20\0\2\53\1\0"+
    "\2\54\5\53\1\73\7\53\1\74\1\53\1\75\7\53"+
    "\1\76\3\53\20\0\2\53\1\0\2\54\16\53\1\77"+
    "\2\53\1\100\11\53\20\0\2\53\1\0\2\54\6\53"+
    "\1\101\2\53\1\102\21\53\20\0\2\53\1\0\2\54"+
    "\22\53\1\103\10\53\20\0\2\53\1\0\2\54\6\53"+
    "\1\104\24\53\20\0\2\53\1\0\2\54\6\53\1\61"+
    "\24\53\20\0\2\53\1\0\2\54\15\53\1\105\15\53"+
    "\20\0\2\53\1\0\2\54\6\53\1\106\24\53\23\0"+
    "\2\47\35\0\2\52\17\0\2\47\36\0\1\52\1\107"+
    "\16\0\2\47\36\0\1\52\1\0\1\107\15\0\2\47"+
    "\36\0\1\52\3\0\1\52\13\0\2\47\36\0\1\52"+
    "\4\0\1\52\1\0\1\43\2\0\43\43\1\0\10\43"+
    "\21\0\1\110\2\0\1\111\5\0\1\112\14\0\1\113"+
    "\21\0\1\114\2\47\2\0\1\115\6\0\1\115\33\0"+
    "\1\50\1\116\1\5\55\50\5\117\1\120\52\117\6\0"+
    "\2\53\1\0\35\53\20\0\2\53\1\114\2\54\2\53"+
    "\1\121\6\53\1\121\21\53\12\0\2\55\1\0\5\55"+
    "\1\122\2\57\1\60\1\55\1\123\6\55\1\123\12\55"+
    "\1\60\22\55\1\0\5\55\1\122\2\57\2\55\1\123"+
    "\6\55\1\123\33\55\11\0\2\124\1\0\3\125\3\0"+
    "\1\125\1\0\1\125\1\0\1\125\4\0\2\125\31\0"+
    "\2\53\1\0\7\53\1\126\25\53\20\0\2\53\1\0"+
    "\16\53\1\127\2\53\1\130\13\53\20\0\2\53\1\0"+
    "\33\53\1\131\1\53\20\0\2\53\1\0\13\53\1\132"+
    "\21\53\20\0\2\53\1\0\7\53\1\133\17\53\1\134"+
    "\5\53\20\0\2\53\1\0\6\53\1\135\26\53\20\0"+
    "\2\53\1\0\16\53\1\136\16\53\20\0\2\53\1\0"+
    "\7\53\1\137\25\53\20\0\2\53\1\0\20\53\1\140"+
    "\14\53\20\0\2\53\1\0\5\53\1\141\27\53\20\0"+
    "\2\53\1\0\5\53\1\142\4\53\1\143\22\53\20\0"+
    "\2\53\1\0\10\53\1\144\24\53\20\0\2\53\1\0"+
    "\27\53\1\145\1\146\4\53\20\0\2\53\1\0\21\53"+
    "\1\147\13\53\20\0\2\53\1\0\7\53\1\100\25\53"+
    "\20\0\2\53\1\0\6\53\1\150\26\53\20\0\2\53"+
    "\1\0\23\53\1\151\11\53\20\0\2\53\1\0\10\53"+
    "\1\152\24\53\20\0\2\53\1\0\20\53\1\153\14\53"+
    "\20\0\2\53\1\0\21\53\1\154\13\53\20\0\2\53"+
    "\1\0\21\53\1\155\2\53\1\156\10\53\63\0\1\52"+
    "\17\0\2\114\55\0\3\114\45\0\2\157\1\5\55\157"+
    "\5\117\1\160\56\117\1\161\1\160\52\117\6\0\2\53"+
    "\1\114\35\53\22\0\1\114\2\47\55\0\1\114\2\124"+
    "\1\0\1\125\1\162\1\125\3\0\1\125\1\0\1\162"+
    "\1\0\1\125\4\0\2\125\34\0\2\125\1\0\3\125"+
    "\3\0\1\125\1\0\1\125\1\0\1\125\4\0\2\125"+
    "\31\0\2\53\1\0\10\53\1\100\24\53\20\0\2\53"+
    "\1\0\21\53\1\163\13\53\20\0\2\53\1\0\10\53"+
    "\1\164\24\53\20\0\2\53\1\0\13\53\1\165\21\53"+
    "\20\0\2\53\1\0\5\53\1\166\27\53\20\0\2\53"+
    "\1\0\6\53\1\167\26\53\20\0\2\53\1\0\21\53"+
    "\1\170\13\53\20\0\2\53\1\0\25\53\1\100\7\53"+
    "\20\0\2\53\1\0\13\53\1\100\21\53\20\0\2\53"+
    "\1\0\13\53\1\167\21\53\20\0\2\53\1\0\7\53"+
    "\1\171\6\53\1\77\16\53\20\0\2\53\1\0\12\53"+
    "\1\100\22\53\20\0\2\53\1\0\7\53\1\172\25\53"+
    "\20\0\2\53\1\0\6\53\1\173\26\53\20\0\2\53"+
    "\1\0\12\53\1\77\22\53\20\0\2\53\1\0\20\53"+
    "\1\174\14\53\20\0\2\53\1\0\13\53\1\175\21\53"+
    "\20\0\2\53\1\0\7\53\1\176\25\53\20\0\2\53"+
    "\1\0\11\53\1\154\23\53\20\0\2\53\1\0\5\53"+
    "\1\177\27\53\20\0\2\53\1\0\5\53\1\77\27\53"+
    "\20\0\2\53\1\0\27\53\1\100\5\53\20\0\2\53"+
    "\1\0\24\53\1\136\10\53\20\0\2\53\1\0\22\53"+
    "\1\100\12\53\20\0\2\53\1\0\5\53\1\200\27\53"+
    "\12\0\2\157\1\0\55\157\4\117\1\5\1\160\52\117"+
    "\10\0\1\114\2\125\1\0\3\125\3\0\1\125\1\0"+
    "\1\125\1\0\1\125\4\0\2\125\31\0\2\53\1\0"+
    "\27\53\1\145\5\53\20\0\2\53\1\0\20\53\1\100"+
    "\14\53\20\0\2\53\1\0\22\53\1\201\12\53\20\0"+
    "\2\53\1\0\14\53\1\100\20\53\20\0\2\53\1\0"+
    "\12\53\1\164\22\53\20\0\2\53\1\0\16\53\1\202"+
    "\16\53\20\0\2\53\1\0\21\53\1\203\13\53\20\0"+
    "\2\53\1\0\21\53\1\204\13\53\20\0\2\53\1\0"+
    "\15\53\1\77\17\53\20\0\2\53\1\0\13\53\1\155"+
    "\21\53\20\0\2\53\1\0\10\53\1\205\24\53\20\0"+
    "\2\53\1\0\15\53\1\206\17\53\20\0\2\53\1\0"+
    "\6\53\1\207\26\53\20\0\2\53\1\0\7\53\1\105"+
    "\25\53\20\0\2\53\1\0\13\53\1\205\21\53\20\0"+
    "\2\53\1\0\7\53\1\210\25\53\20\0\2\53\1\0"+
    "\20\53\1\211\14\53\20\0\2\53\1\0\15\53\1\100"+
    "\17\53\20\0\2\53\1\0\23\53\1\100\11\53\20\0"+
    "\2\53\1\0\17\53\1\100\15\53\20\0\2\53\1\0"+
    "\24\53\1\77\10\53\20\0\2\53\1\0\13\53\1\141"+
    "\21\53\20\0\2\53\1\0\6\53\1\136\26\53\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\1\1\11\36\1\2\11\3\1\1\0\1\11"+
    "\2\1\1\0\2\1\1\0\27\1\4\11\3\1\2\0"+
    "\37\1\1\0\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  StringBuffer string = new StringBuffer();

  private Token createToken(KindToken kindToken){
    return new Token(kindToken, yyline);
  }

  private Token createStringValueToken(KindToken kindToken, String value){
    return new TokenStringValue(kindToken, yyline, value);
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2294) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { string.append('\t');
          }
        case 16: break;
        case 8: 
          { yybegin(YYINITIAL); return createStringValueToken(KindToken.LITERAL, string.toString());
          }
        case 17: break;
        case 11: 
          { return createToken(KindToken.RESERVED_WORD);
          }
        case 18: break;
        case 4: 
          { return createToken(KindToken.IDENTIFIER);
          }
        case 19: break;
        case 2: 
          { /* ignore */
          }
        case 20: break;
        case 9: 
          { string.append('\\');
          }
        case 21: break;
        case 15: 
          { string.append('\"');
          }
        case 22: break;
        case 13: 
          { string.append('\r');
          }
        case 23: break;
        case 14: 
          { string.append('\n');
          }
        case 24: break;
        case 3: 
          { return createToken(KindToken.OPERATOR);
          }
        case 25: break;
        case 5: 
          { return createToken(KindToken.LITERAL);
          }
        case 26: break;
        case 7: 
          { string.append( yytext() );
          }
        case 27: break;
        case 6: 
          { string.setLength(0); yybegin(STRING);
          }
        case 28: break;
        case 10: 
          { /*Ignore*/
          }
        case 29: break;
        case 1: 
          { throw new Error("Illegal character <"+yytext()+">");
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
